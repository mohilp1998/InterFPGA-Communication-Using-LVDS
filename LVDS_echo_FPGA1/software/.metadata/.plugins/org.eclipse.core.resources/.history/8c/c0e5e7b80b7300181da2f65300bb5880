/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include "io.h"
#include "stdio.h"
#include <sys/alt_irq.h>
#include "unistd.h"

#define COMPONENT_BASE LVDS_ECHO_FPGA1_COMPONENT_0_BASE
#define COMPONENT_IRQ LVDS_ECHO_FPGA1_COMPONENT_0_IRQ
#define COMPONENT_IRQ_ID LVDS_ECHO_FPGA1_COMPONENT_0_IRQ_INTERRUPT_CONTROLLER_ID


void sendToPeripheral (unsigned int dataToSend);
void receiveFromPeripheral ();
void read_isr(void* unused_context);
volatile int context_pointer;
int ISR_reg;
unsigned int idx_read_counter=0;
unsigned int printSend = 0;
unsigned int printRcv = 0;
unsigned int useISR = 1;

#if 0
unsigned int startFlit = 0x84000000;
unsigned int txData =0xC4000000;
#else
unsigned int startFlit = 0x40800000;
unsigned int txData =0x60800000;
#endif

//unsigned int rxData[2100];
unsigned int dataToRecv_isr,dataToRecv;
unsigned const N_ITEMS_TO_SEND = 8192;


int main()
{

//	  usleep(10e5);
	  alt_putstr("Hello from NIOS II!\n");
	  if (useISR){
	  //registering an interrupt
	  void *context_pointer_ptr = (void*) &context_pointer;
	  ISR_reg = alt_ic_isr_register(DE0_FPGA1_COMPONENT_0_IRQ_INTERRUPT_CONTROLLER_ID,
			  DE0_FPGA1_COMPONENT_0_IRQ,
			  read_isr,
			  context_pointer_ptr,0x0);

	  }

	  for(unsigned i=0; i<N_ITEMS_TO_SEND; i++)
	  	  {
	  		  sendToPeripheral(startFlit);
	  		  sendToPeripheral(txData|i);
	  	  }

	  if (useISR == 0){
		  idx_read_counter=2*N_ITEMS_TO_SEND;
		  while(idx_read_counter != 0){
			  receiveFromPeripheral();
		  	  idx_read_counter--;
		  }
		  printf("Data received %x \n",dataToRecv);
	  }
	  else{
		  while(idx_read_counter!=2*N_ITEMS_TO_SEND){
		  	  usleep(1);
		  };
		  printf("Data received %x \n",dataToRecv_isr);
	  }

	  alt_putstr("All received\n");
}

void sendToPeripheral (unsigned int dataToSend)
{
	int status;
	do
	{
		status = IORD(DE0_FPGA1_COMPONENT_0_BASE,0x00000000); //0x0
	}
	while (0 == (status & 0x00000001));	// check for last bit (notFull)
	IOWR(DE0_FPGA1_COMPONENT_0_BASE,0x00000001, dataToSend);
	if (printSend){
			printf("Data sent %x \n",dataToSend);
	}
}

void receiveFromPeripheral ()
{
	int status;
	do
	{
		status = IORD(DE0_FPGA1_COMPONENT_0_BASE,0x00000000);
	}
	while (0 == (status & 0x00000002));
	dataToRecv = IORD(DE0_FPGA1_COMPONENT_0_BASE,0x00000002);
	if(printRcv)
		printf("Data received %x \n",dataToRecv);
}

void read_isr (void* unused_context)
{
	//disable interrupt
//	alt_ic_irq_disable (DE0_FPGA1_COMPONENT_0_IRQ_INTERRUPT_CONTROLLER_ID,DE0_FPGA1_COMPONENT_0_IRQ);

	dataToRecv_isr = IORD(DE0_FPGA1_COMPONENT_0_BASE,0x00000002);
	if (printRcv)
		printf("Data received %x in ISR count %d \n",dataToRecv_isr,idx_read_counter);

	idx_read_counter++;

	//enable interrupt
	alt_ic_irq_enabled (DE0_FPGA1_COMPONENT_0_IRQ_INTERRUPT_CONTROLLER_ID,DE0_FPGA1_COMPONENT_0_IRQ);
}



