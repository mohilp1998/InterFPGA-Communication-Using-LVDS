//
// Generated by Bluespec Compiler, version 2017.04.beta1 (build 35065, 2017-04-17)
//
// On Mon Jun 18 16:53:12 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register counter
  reg [31 : 0] counter;
  wire [31 : 0] counter$D_IN;
  wire counter$EN;

  // register destAddr
  reg [3 : 0] destAddr;
  wire [3 : 0] destAddr$D_IN;
  wire destAddr$EN;

  // register state
  reg [31 : 0] state;
  wire [31 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule top
  wire [31 : 0] top$getFlit0_get, top$putFlit0_put;
  wire top$EN_getFlit0_get, top$EN_putFlit0_put, top$RDY_getFlit0_get;

  // submodule top
  mkMFpgaTop top(.CLK(CLK),
		 .RST_N(RST_N),
		 .putFlit0_put(top$putFlit0_put),
		 .EN_putFlit0_put(top$EN_putFlit0_put),
		 .EN_getFlit0_get(top$EN_getFlit0_get),
		 .RDY_putFlit0_put(),
		 .getFlit0_get(top$getFlit0_get),
		 .RDY_getFlit0_get(top$RDY_getFlit0_get));

  // register counter
  assign counter$D_IN = counter + 32'd1 ;
  assign counter$EN = 1'd1 ;

  // register destAddr
  assign destAddr$D_IN = 4'h0 ;
  assign destAddr$EN = 1'b0 ;

  // register state
  assign state$D_IN = 32'h0 ;
  assign state$EN = 1'b0 ;

  // submodule top
  assign top$putFlit0_put = 32'h0 ;
  assign top$EN_putFlit0_put = 1'b0 ;
  assign top$EN_getFlit0_get = top$RDY_getFlit0_get ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	destAddr <= `BSV_ASSIGNMENT_DELAY 4'd1;
	state <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (destAddr$EN) destAddr <= `BSV_ASSIGNMENT_DELAY destAddr$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 32'hAAAAAAAA;
    destAddr = 4'hA;
    state = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE) if (top$RDY_getFlit0_get) $write("PORT0 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("'h%h", top$getFlit0_get[31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("'h%h", top$getFlit0_get[30]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("'h%h", top$getFlit0_get[29:26]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("'h%h", top$getFlit0_get[25]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write("'h%h", top$getFlit0_get[24:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit0_get) $write(" at cc=%d", $signed(counter), "\n");
  end
  // synopsys translate_on
endmodule  // mkTb

