
mysoft2.elf:     file format elf32-littlenios2
mysoft2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008180

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00001560 memsz 0x00001560 flags r-x
    LOAD off    0x00002580 vaddr 0x00009580 paddr 0x00009684 align 2**12
         filesz 0x00000104 memsz 0x00000104 flags rw-
    LOAD off    0x00002788 vaddr 0x00009788 paddr 0x00009788 align 2**12
         filesz 0x00000000 memsz 0x00000140 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000126c  00008180  00008180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000194  000093ec  000093ec  000023ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000104  00009580  00009684  00002580  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000140  00009788  00009788  00002788  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000098c8  000098c8  00002684  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000470  00000000  00000000  000026a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004a7e  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001dbb  00000000  00000000  00007596  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001f7e  00000000  00000000  00009351  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005a4  00000000  00000000  0000b2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000018c4  00000000  00000000  0000b874  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c99  00000000  00000000  0000d138  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0000edd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000358  00000000  00000000  0000ee18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000107aa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000107ad  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000107b9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000107ba  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000107bb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000107c6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000107d1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000014  00000000  00000000  000107dc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000020  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY
 26 .jdi          00004672  00000000  00000000  00010810  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00035d1f  00000000  00000000  00014e82  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008180 l    d  .text	00000000 .text
000093ec l    d  .rodata	00000000 .rodata
00009580 l    d  .rwdata	00000000 .rwdata
00009788 l    d  .bss	00000000 .bss
000098c8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../mysoft2_bsp//obj/HAL/src/crt0.o
000081b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000088c8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00009580 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000097c4 g     O .bss	00000004 alt_instruction_exception_handler
000091b4 g     F .text	0000002c alt_main
000097c8 g     O .bss	00000100 alt_irq
00009684 g       *ABS*	00000000 __flash_rwdata_start
00009794 g     O .bss	00000004 endtime
0000887c g     F .text	0000004c printf
00009798 g     O .bss	00000004 starttime
000091e0 g     F .text	00000038 alt_putstr
000093e4 g     F .text	00000008 altera_nios2_gen2_irq_init
0000979c g     O .bss	00000004 time_count
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009664 g     O .rwdata	00000004 txData
000097b0 g     O .bss	00000004 errno
000097bc g     O .bss	00000004 alt_argv
00011660 g       *ABS*	00000000 _gp
00009218 g     F .text	00000004 usleep
00009370 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00008840 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008520 g     F .text	00000064 .hidden __udivsi3
00009790 g     O .bss	00000004 idx_read_counter
000086cc g     F .text	00000110 .hidden __extendsfdf2
00009670 g     O .rwdata	00000004 _global_impure_ptr
000098c8 g       *ABS*	00000000 __bss_end
0000906c g     F .text	00000068 alt_iic_isr_register
000097a0 g     O .bss	00000004 ISR_reg
00009054 g     F .text	00000018 alt_ic_irq_enabled
000097b4 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	00000060 alt_irq_handler
00009788 g     O .bss	00000004 printRcv
00009368 g     F .text	00000004 alt_dcache_flush_all
00009684 g       *ABS*	00000000 __ram_rwdata_end
0000921c g     F .text	0000006c write
00009580 g       *ABS*	00000000 __ram_rodata_end
0000967c g     O .rwdata	00000004 jtag_uart_0
00008584 g     F .text	00000058 .hidden __umodsi3
000098c8 g       *ABS*	00000000 end
0000815c g     F .exceptions	00000024 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
000087dc g     F .text	00000064 .hidden __clzsi2
000092ac g     F .text	00000034 altera_avalon_jtag_uart_write
00008934 g     F .text	0000052c ___vfprintf_internal_r
00008180 g     F .text	0000003c _start
000081bc g     F .text	00000058 read_isr
000092a8 g     F .text	00000004 alt_sys_init
00008fa8 g     F .text	00000028 .hidden __mulsi3
00009580 g       *ABS*	00000000 __ram_rwdata_start
000093ec g       *ABS*	00000000 __ram_rodata_start
000092e0 g     F .text	00000088 alt_busy_sleep
000098c8 g       *ABS*	00000000 __alt_stack_base
000097a4 g     O .bss	00000004 dataToRecv_isr
00008e7c g     F .text	000000b8 __sfvwrite_small_dev
00009788 g       *ABS*	00000000 __bss_start
00008294 g     F .text	00000194 main
000097b8 g     O .bss	00000004 alt_envp
00009680 g     O .rwdata	00000004 alt_errno
00008428 g     F .text	00000084 .hidden __divsi3
000093ec g       *ABS*	00000000 __flash_rodata_start
000097a8 g     O .bss	00000004 dataToRecv
0000966c g     O .rwdata	00000004 useISR
00009288 g     F .text	00000020 alt_irq_init
00009480 g     O .rodata	00000100 .hidden __clz_tab
00008f50 g     F .text	00000058 _write_r
00009674 g     O .rwdata	00000004 _impure_ptr
000097c0 g     O .bss	00000004 alt_argc
00008250 g     F .text	00000044 receiveFromPeripheral
00008020 g       .exceptions	00000000 alt_irq_entry
00008214 g     F .text	0000003c sendToPeripheral
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008fd0 g     F .text	00000004 alt_ic_isr_register
00009684 g       *ABS*	00000000 _edata
000098c8 g       *ABS*	00000000 _end
00008180 g       *ABS*	00000000 __ram_exceptions_end
00009014 g     F .text	00000040 alt_ic_irq_disable
000085dc g     F .text	000000f0 .hidden __floatunsisf
000084ac g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
000097ac g     O .bss	00000004 context_pointer
0000800c g       .entry	00000000 _exit
00008f34 g     F .text	0000001c strlen
0000936c g     F .text	00000004 alt_icache_flush_all
00009678 g     O .rwdata	00000004 alt_priority_mask
00008fd4 g     F .text	00000040 alt_ic_irq_enable
00008e60 g     F .text	0000001c __vfprintf_internal
0000978c g     O .bss	00000004 printSend
00009660 g     O .rwdata	00000004 N_ITEMS_TO_SEND
000090d4 g     F .text	000000e0 alt_load
00009668 g     O .rwdata	00000004 startFlit



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08606014 	ori	at,at,33152
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	000815c0 	call	815c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defffe04 	addi	sp,sp,-8
    8100:	dfc00115 	stw	ra,4(sp)
    8104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    810c:	04000074 	movhi	r16,1
    8110:	8425f204 	addi	r16,r16,-26680

  active = alt_irq_pending ();

  do
  {
    i = 0;
    8114:	0005883a 	mov	r2,zero
    mask = 1;
    8118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    811c:	20ca703a 	and	r5,r4,r3
    8120:	28000b26 	beq	r5,zero,8150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    8124:	100490fa 	slli	r2,r2,3
    8128:	8085883a 	add	r2,r16,r2
    812c:	10c00017 	ldw	r3,0(r2)
    8130:	11000117 	ldw	r4,4(r2)
    8134:	183ee83a 	callr	r3
    8138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    813c:	203ff51e 	bne	r4,zero,8114 <alt_irq_handler+0x18>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	dc000017 	ldw	r16,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    8150:	18c7883a 	add	r3,r3,r3
      i++;
    8154:	10800044 	addi	r2,r2,1

    } while (1);
    8158:	003ff006 	br	811c <alt_irq_handler+0x20>

0000815c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    815c:	d0a05917 	ldw	r2,-32412(gp)
    8160:	10000426 	beq	r2,zero,8174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    8164:	200b883a 	mov	r5,r4
    8168:	000d883a 	mov	r6,zero
    816c:	013fffc4 	movi	r4,-1
    8170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    8178:	0005883a 	mov	r2,zero
    817c:	f800283a 	ret

Disassembly of section .text:

00008180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    818c:	d6859814 	ori	gp,gp,5728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8194:	10a5e214 	ori	r2,r2,38792

    movhi r3, %hi(__bss_end)
    8198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    819c:	18e63214 	ori	r3,r3,39112

    beq r2, r3, 1f
    81a0:	10c00326 	beq	r2,r3,81b0 <_start+0x30>

0:
    stw zero, (r2)
    81a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    81a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    81ac:	10fffd36 	bltu	r2,r3,81a4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    81b0:	00090d40 	call	90d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    81b4:	00091b40 	call	91b4 <alt_main>

000081b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    81b8:	003fff06 	br	81b8 <alt_after_alt_main>

000081bc <read_isr>:
void read_isr (void* unused_context)
{
	//disable interrupt
//	alt_ic_irq_disable (COMPONENT_IRQ_ID,COMPONENT_IRQ);

	dataToRecv_isr = IORD(COMPONENT_BASE,0x00000002);
    81bc:	00800074 	movhi	r2,1
	if(printRcv)
		printf("Data received %x \n",dataToRecv);
}

void read_isr (void* unused_context)
{
    81c0:	deffff04 	addi	sp,sp,-4
	//disable interrupt
//	alt_ic_irq_disable (COMPONENT_IRQ_ID,COMPONENT_IRQ);

	dataToRecv_isr = IORD(COMPONENT_BASE,0x00000002);
    81c4:	10840204 	addi	r2,r2,4104
	if(printRcv)
		printf("Data received %x \n",dataToRecv);
}

void read_isr (void* unused_context)
{
    81c8:	dfc00015 	stw	ra,0(sp)
	//disable interrupt
//	alt_ic_irq_disable (COMPONENT_IRQ_ID,COMPONENT_IRQ);

	dataToRecv_isr = IORD(COMPONENT_BASE,0x00000002);
    81cc:	11400037 	ldwio	r5,0(r2)
    81d0:	00800074 	movhi	r2,1
    81d4:	10a5e904 	addi	r2,r2,-26716
    81d8:	11400015 	stw	r5,0(r2)
	if (printRcv)
    81dc:	d0a04a17 	ldw	r2,-32472(gp)
    81e0:	10000426 	beq	r2,zero,81f4 <read_isr+0x38>
		printf("Data received %x in ISR count %d \n",dataToRecv_isr,idx_read_counter);
    81e4:	d1a04c17 	ldw	r6,-32464(gp)
    81e8:	01000074 	movhi	r4,1
    81ec:	2124fb04 	addi	r4,r4,-27668
    81f0:	000887c0 	call	887c <printf>

	idx_read_counter++;
    81f4:	d0a04c17 	ldw	r2,-32464(gp)

	//enable interrupt
	alt_ic_irq_enabled (COMPONENT_IRQ_ID,COMPONENT_IRQ);
    81f8:	01400044 	movi	r5,1
    81fc:	0009883a 	mov	r4,zero

	dataToRecv_isr = IORD(COMPONENT_BASE,0x00000002);
	if (printRcv)
		printf("Data received %x in ISR count %d \n",dataToRecv_isr,idx_read_counter);

	idx_read_counter++;
    8200:	10800044 	addi	r2,r2,1
    8204:	d0a04c15 	stw	r2,-32464(gp)

	//enable interrupt
	alt_ic_irq_enabled (COMPONENT_IRQ_ID,COMPONENT_IRQ);
}
    8208:	dfc00017 	ldw	ra,0(sp)
    820c:	dec00104 	addi	sp,sp,4
		printf("Data received %x in ISR count %d \n",dataToRecv_isr,idx_read_counter);

	idx_read_counter++;

	//enable interrupt
	alt_ic_irq_enabled (COMPONENT_IRQ_ID,COMPONENT_IRQ);
    8210:	00090541 	jmpi	9054 <alt_ic_irq_enabled>

00008214 <sendToPeripheral>:
void sendToPeripheral (unsigned int dataToSend)
{
	int status;
	do
	{
		status = IORD(COMPONENT_BASE,0x00000000); //0x0
    8214:	00c00074 	movhi	r3,1
    8218:	18c40004 	addi	r3,r3,4096
    821c:	18800037 	ldwio	r2,0(r3)
	}
	while (0 == (status & 0x00000001));	// check for last bit (notFull)
    8220:	1080004c 	andi	r2,r2,1
    8224:	103ffd26 	beq	r2,zero,821c <sendToPeripheral+0x8>
	IOWR(COMPONENT_BASE,0x00000001, dataToSend);
    8228:	00800074 	movhi	r2,1
    822c:	10840104 	addi	r2,r2,4100
    8230:	11000035 	stwio	r4,0(r2)
	if (printSend){
    8234:	d0a04b17 	ldw	r2,-32468(gp)
    8238:	10000426 	beq	r2,zero,824c <sendToPeripheral+0x38>
			printf("Data sent %x \n",dataToSend);
    823c:	200b883a 	mov	r5,r4
    8240:	01000074 	movhi	r4,1
    8244:	21250404 	addi	r4,r4,-27632
    8248:	000887c1 	jmpi	887c <printf>
    824c:	f800283a 	ret

00008250 <receiveFromPeripheral>:
void receiveFromPeripheral ()
{
	int status;
	do
	{
		status = IORD(COMPONENT_BASE,0x00000000);
    8250:	00c00074 	movhi	r3,1
    8254:	18c40004 	addi	r3,r3,4096
    8258:	18800037 	ldwio	r2,0(r3)
	}
	while (0 == (status & 0x00000002));
    825c:	1080008c 	andi	r2,r2,2
    8260:	103ffd26 	beq	r2,zero,8258 <receiveFromPeripheral+0x8>
	dataToRecv = IORD(COMPONENT_BASE,0x00000002);
    8264:	00800074 	movhi	r2,1
    8268:	10840204 	addi	r2,r2,4104
    826c:	11400037 	ldwio	r5,0(r2)
    8270:	00800074 	movhi	r2,1
    8274:	10a5ea04 	addi	r2,r2,-26712
    8278:	11400015 	stw	r5,0(r2)
	if(printRcv)
    827c:	d0a04a17 	ldw	r2,-32472(gp)
    8280:	10000326 	beq	r2,zero,8290 <receiveFromPeripheral+0x40>
		printf("Data received %x \n",dataToRecv);
    8284:	01000074 	movhi	r4,1
    8288:	21250804 	addi	r4,r4,-27616
    828c:	000887c1 	jmpi	887c <printf>
    8290:	f800283a 	ret

00008294 <main>:
float time_count;

int main()
{

	  alt_putstr("Hello from NIOS II!\n");
    8294:	01000074 	movhi	r4,1
unsigned const N_ITEMS_TO_SEND = 1000000;
unsigned int starttime,endtime;
float time_count;

int main()
{
    8298:	defffa04 	addi	sp,sp,-24

	  alt_putstr("Hello from NIOS II!\n");
    829c:	21250d04 	addi	r4,r4,-27596
unsigned const N_ITEMS_TO_SEND = 1000000;
unsigned int starttime,endtime;
float time_count;

int main()
{
    82a0:	dfc00515 	stw	ra,20(sp)
    82a4:	dcc00415 	stw	r19,16(sp)
    82a8:	dc800315 	stw	r18,12(sp)
    82ac:	dc400215 	stw	r17,8(sp)
    82b0:	dc000115 	stw	r16,4(sp)

	  alt_putstr("Hello from NIOS II!\n");
    82b4:	00091e00 	call	91e0 <alt_putstr>
	  if (useISR){
    82b8:	d0a00317 	ldw	r2,-32756(gp)
    82bc:	10000b26 	beq	r2,zero,82ec <main+0x58>
	  //registering an interrupt
	  void *context_pointer_ptr = (void*) &context_pointer;
	  ISR_reg = alt_ic_isr_register(COMPONENT_IRQ_ID,
    82c0:	01c00074 	movhi	r7,1
    82c4:	01800074 	movhi	r6,1
    82c8:	d8000015 	stw	zero,0(sp)
    82cc:	39e5eb04 	addi	r7,r7,-26708
    82d0:	31a06f04 	addi	r6,r6,-32324
    82d4:	01400044 	movi	r5,1
    82d8:	0009883a 	mov	r4,zero
    82dc:	0008fd00 	call	8fd0 <alt_ic_isr_register>
    82e0:	00c00074 	movhi	r3,1
    82e4:	18e5e804 	addi	r3,r3,-26720
    82e8:	18800015 	stw	r2,0(r3)
			  COMPONENT_IRQ,
			  read_isr,
			  context_pointer_ptr,0x0);

	  }
	starttime = IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);
    82ec:	00c00074 	movhi	r3,1
    82f0:	18c40a04 	addi	r3,r3,4136
    82f4:	19000037 	ldwio	r4,0(r3)
    82f8:	00800074 	movhi	r2,1
    82fc:	10a5e604 	addi	r2,r2,-26728
	  for(unsigned i=0; i<N_ITEMS_TO_SEND; i++)
    8300:	04c003f4 	movhi	r19,15
			  COMPONENT_IRQ,
			  read_isr,
			  context_pointer_ptr,0x0);

	  }
	starttime = IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);
    8304:	11000015 	stw	r4,0(r2)
	  for(unsigned i=0; i<N_ITEMS_TO_SEND; i++)
    8308:	0021883a 	mov	r16,zero
    830c:	1825883a 	mov	r18,r3
    8310:	1023883a 	mov	r17,r2
    8314:	9cd09004 	addi	r19,r19,16960
	  	  {
	  		  sendToPeripheral(startFlit);
    8318:	d1200217 	ldw	r4,-32760(gp)
    831c:	00082140 	call	8214 <sendToPeripheral>
	  		  sendToPeripheral(txData|i);
    8320:	d1200117 	ldw	r4,-32764(gp)
    8324:	8108b03a 	or	r4,r16,r4
			  read_isr,
			  context_pointer_ptr,0x0);

	  }
	starttime = IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);
	  for(unsigned i=0; i<N_ITEMS_TO_SEND; i++)
    8328:	84000044 	addi	r16,r16,1
	  	  {
	  		  sendToPeripheral(startFlit);
	  		  sendToPeripheral(txData|i);
    832c:	00082140 	call	8214 <sendToPeripheral>
			  read_isr,
			  context_pointer_ptr,0x0);

	  }
	starttime = IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);
	  for(unsigned i=0; i<N_ITEMS_TO_SEND; i++)
    8330:	84fff91e 	bne	r16,r19,8318 <main+0x84>
	  	  {
	  		  sendToPeripheral(startFlit);
	  		  sendToPeripheral(txData|i);
	  	  }

	  if (useISR == 0){
    8334:	d0a00317 	ldw	r2,-32756(gp)
    8338:	040007f4 	movhi	r16,31
    833c:	84212004 	addi	r16,r16,-31616
    8340:	10000b1e 	bne	r2,zero,8370 <main+0xdc>
		  idx_read_counter=2*N_ITEMS_TO_SEND;
    8344:	d4204c15 	stw	r16,-32464(gp)
		  while(idx_read_counter != 0){
    8348:	d0a04c17 	ldw	r2,-32464(gp)
    834c:	10000526 	beq	r2,zero,8364 <main+0xd0>
			  receiveFromPeripheral();
    8350:	00082500 	call	8250 <receiveFromPeripheral>
		  	  idx_read_counter--;
    8354:	d0a04c17 	ldw	r2,-32464(gp)
    8358:	10bfffc4 	addi	r2,r2,-1
    835c:	d0a04c15 	stw	r2,-32464(gp)
    8360:	003ff906 	br	8348 <main+0xb4>
		  }
		  printf("Data received %x \n",dataToRecv);
    8364:	00800074 	movhi	r2,1
    8368:	10a5ea04 	addi	r2,r2,-26712
    836c:	00000706 	br	838c <main+0xf8>
	  }
	  else{
		  while(idx_read_counter!=2*N_ITEMS_TO_SEND){
    8370:	d0a04c17 	ldw	r2,-32464(gp)
    8374:	14000326 	beq	r2,r16,8384 <main+0xf0>
		  	  usleep(1);
    8378:	01000044 	movi	r4,1
    837c:	00092180 	call	9218 <usleep>
    8380:	003ffb06 	br	8370 <main+0xdc>
		  };
		  printf("Data received %x \n",dataToRecv_isr);
    8384:	00800074 	movhi	r2,1
    8388:	10a5e904 	addi	r2,r2,-26716
    838c:	11400017 	ldw	r5,0(r2)
    8390:	01000074 	movhi	r4,1
    8394:	21250804 	addi	r4,r4,-27616
    8398:	000887c0 	call	887c <printf>
	  }
	endtime =IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);  
    839c:	90800037 	ldwio	r2,0(r18)
    83a0:	04000074 	movhi	r16,1
	  alt_putstr("All received\n");
    83a4:	01000074 	movhi	r4,1
		  while(idx_read_counter!=2*N_ITEMS_TO_SEND){
		  	  usleep(1);
		  };
		  printf("Data received %x \n",dataToRecv_isr);
	  }
	endtime =IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);  
    83a8:	8425e504 	addi	r16,r16,-26732
	  alt_putstr("All received\n");
    83ac:	21251304 	addi	r4,r4,-27572
		  while(idx_read_counter!=2*N_ITEMS_TO_SEND){
		  	  usleep(1);
		  };
		  printf("Data received %x \n",dataToRecv_isr);
	  }
	endtime =IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);  
    83b0:	80800015 	stw	r2,0(r16)
	  alt_putstr("All received\n");
    83b4:	00091e00 	call	91e0 <alt_putstr>
	time_count = ((endtime - starttime) /50000000);
    83b8:	88800017 	ldw	r2,0(r17)
    83bc:	81000017 	ldw	r4,0(r16)
    83c0:	0140bef4 	movhi	r5,763
    83c4:	297c2004 	addi	r5,r5,-3968
    83c8:	2089c83a 	sub	r4,r4,r2
    83cc:	00085200 	call	8520 <__udivsi3>
    83d0:	1009883a 	mov	r4,r2
    83d4:	00085dc0 	call	85dc <__floatunsisf>
    83d8:	00c00074 	movhi	r3,1
    83dc:	18e5e704 	addi	r3,r3,-26724
	printf("total time to send %d items = %f\n",N_ITEMS_TO_SEND,time_count);
    83e0:	1009883a 	mov	r4,r2
		  };
		  printf("Data received %x \n",dataToRecv_isr);
	  }
	endtime =IORD(CLK_COUNTER_COMPONENT_0_BASE,0x0);  
	  alt_putstr("All received\n");
	time_count = ((endtime - starttime) /50000000);
    83e4:	18800015 	stw	r2,0(r3)
	printf("total time to send %d items = %f\n",N_ITEMS_TO_SEND,time_count);
    83e8:	00086cc0 	call	86cc <__extendsfdf2>
    83ec:	014003f4 	movhi	r5,15
    83f0:	01000074 	movhi	r4,1
    83f4:	100d883a 	mov	r6,r2
    83f8:	180f883a 	mov	r7,r3
    83fc:	29509004 	addi	r5,r5,16960
    8400:	21251704 	addi	r4,r4,-27556
    8404:	000887c0 	call	887c <printf>
}
    8408:	0005883a 	mov	r2,zero
    840c:	dfc00517 	ldw	ra,20(sp)
    8410:	dcc00417 	ldw	r19,16(sp)
    8414:	dc800317 	ldw	r18,12(sp)
    8418:	dc400217 	ldw	r17,8(sp)
    841c:	dc000117 	ldw	r16,4(sp)
    8420:	dec00604 	addi	sp,sp,24
    8424:	f800283a 	ret

00008428 <__divsi3>:
    8428:	20001b16 	blt	r4,zero,8498 <__divsi3+0x70>
    842c:	000f883a 	mov	r7,zero
    8430:	28001616 	blt	r5,zero,848c <__divsi3+0x64>
    8434:	200d883a 	mov	r6,r4
    8438:	29001a2e 	bgeu	r5,r4,84a4 <__divsi3+0x7c>
    843c:	00800804 	movi	r2,32
    8440:	00c00044 	movi	r3,1
    8444:	00000106 	br	844c <__divsi3+0x24>
    8448:	10000d26 	beq	r2,zero,8480 <__divsi3+0x58>
    844c:	294b883a 	add	r5,r5,r5
    8450:	10bfffc4 	addi	r2,r2,-1
    8454:	18c7883a 	add	r3,r3,r3
    8458:	293ffb36 	bltu	r5,r4,8448 <__divsi3+0x20>
    845c:	0005883a 	mov	r2,zero
    8460:	18000726 	beq	r3,zero,8480 <__divsi3+0x58>
    8464:	0005883a 	mov	r2,zero
    8468:	31400236 	bltu	r6,r5,8474 <__divsi3+0x4c>
    846c:	314dc83a 	sub	r6,r6,r5
    8470:	10c4b03a 	or	r2,r2,r3
    8474:	1806d07a 	srli	r3,r3,1
    8478:	280ad07a 	srli	r5,r5,1
    847c:	183ffa1e 	bne	r3,zero,8468 <__divsi3+0x40>
    8480:	38000126 	beq	r7,zero,8488 <__divsi3+0x60>
    8484:	0085c83a 	sub	r2,zero,r2
    8488:	f800283a 	ret
    848c:	014bc83a 	sub	r5,zero,r5
    8490:	39c0005c 	xori	r7,r7,1
    8494:	003fe706 	br	8434 <__divsi3+0xc>
    8498:	0109c83a 	sub	r4,zero,r4
    849c:	01c00044 	movi	r7,1
    84a0:	003fe306 	br	8430 <__divsi3+0x8>
    84a4:	00c00044 	movi	r3,1
    84a8:	003fee06 	br	8464 <__divsi3+0x3c>

000084ac <__modsi3>:
    84ac:	20001716 	blt	r4,zero,850c <__modsi3+0x60>
    84b0:	000f883a 	mov	r7,zero
    84b4:	2005883a 	mov	r2,r4
    84b8:	28001216 	blt	r5,zero,8504 <__modsi3+0x58>
    84bc:	2900162e 	bgeu	r5,r4,8518 <__modsi3+0x6c>
    84c0:	01800804 	movi	r6,32
    84c4:	00c00044 	movi	r3,1
    84c8:	00000106 	br	84d0 <__modsi3+0x24>
    84cc:	30000a26 	beq	r6,zero,84f8 <__modsi3+0x4c>
    84d0:	294b883a 	add	r5,r5,r5
    84d4:	31bfffc4 	addi	r6,r6,-1
    84d8:	18c7883a 	add	r3,r3,r3
    84dc:	293ffb36 	bltu	r5,r4,84cc <__modsi3+0x20>
    84e0:	18000526 	beq	r3,zero,84f8 <__modsi3+0x4c>
    84e4:	1806d07a 	srli	r3,r3,1
    84e8:	11400136 	bltu	r2,r5,84f0 <__modsi3+0x44>
    84ec:	1145c83a 	sub	r2,r2,r5
    84f0:	280ad07a 	srli	r5,r5,1
    84f4:	183ffb1e 	bne	r3,zero,84e4 <__modsi3+0x38>
    84f8:	38000126 	beq	r7,zero,8500 <__modsi3+0x54>
    84fc:	0085c83a 	sub	r2,zero,r2
    8500:	f800283a 	ret
    8504:	014bc83a 	sub	r5,zero,r5
    8508:	003fec06 	br	84bc <__modsi3+0x10>
    850c:	0109c83a 	sub	r4,zero,r4
    8510:	01c00044 	movi	r7,1
    8514:	003fe706 	br	84b4 <__modsi3+0x8>
    8518:	00c00044 	movi	r3,1
    851c:	003ff106 	br	84e4 <__modsi3+0x38>

00008520 <__udivsi3>:
    8520:	200d883a 	mov	r6,r4
    8524:	2900152e 	bgeu	r5,r4,857c <__udivsi3+0x5c>
    8528:	28001416 	blt	r5,zero,857c <__udivsi3+0x5c>
    852c:	00800804 	movi	r2,32
    8530:	00c00044 	movi	r3,1
    8534:	00000206 	br	8540 <__udivsi3+0x20>
    8538:	10000e26 	beq	r2,zero,8574 <__udivsi3+0x54>
    853c:	28000516 	blt	r5,zero,8554 <__udivsi3+0x34>
    8540:	294b883a 	add	r5,r5,r5
    8544:	10bfffc4 	addi	r2,r2,-1
    8548:	18c7883a 	add	r3,r3,r3
    854c:	293ffa36 	bltu	r5,r4,8538 <__udivsi3+0x18>
    8550:	18000826 	beq	r3,zero,8574 <__udivsi3+0x54>
    8554:	0005883a 	mov	r2,zero
    8558:	31400236 	bltu	r6,r5,8564 <__udivsi3+0x44>
    855c:	314dc83a 	sub	r6,r6,r5
    8560:	10c4b03a 	or	r2,r2,r3
    8564:	1806d07a 	srli	r3,r3,1
    8568:	280ad07a 	srli	r5,r5,1
    856c:	183ffa1e 	bne	r3,zero,8558 <__udivsi3+0x38>
    8570:	f800283a 	ret
    8574:	0005883a 	mov	r2,zero
    8578:	f800283a 	ret
    857c:	00c00044 	movi	r3,1
    8580:	003ff406 	br	8554 <__udivsi3+0x34>

00008584 <__umodsi3>:
    8584:	2005883a 	mov	r2,r4
    8588:	2900122e 	bgeu	r5,r4,85d4 <__umodsi3+0x50>
    858c:	28001116 	blt	r5,zero,85d4 <__umodsi3+0x50>
    8590:	01800804 	movi	r6,32
    8594:	00c00044 	movi	r3,1
    8598:	00000206 	br	85a4 <__umodsi3+0x20>
    859c:	30000c26 	beq	r6,zero,85d0 <__umodsi3+0x4c>
    85a0:	28000516 	blt	r5,zero,85b8 <__umodsi3+0x34>
    85a4:	294b883a 	add	r5,r5,r5
    85a8:	31bfffc4 	addi	r6,r6,-1
    85ac:	18c7883a 	add	r3,r3,r3
    85b0:	293ffa36 	bltu	r5,r4,859c <__umodsi3+0x18>
    85b4:	18000626 	beq	r3,zero,85d0 <__umodsi3+0x4c>
    85b8:	1806d07a 	srli	r3,r3,1
    85bc:	11400136 	bltu	r2,r5,85c4 <__umodsi3+0x40>
    85c0:	1145c83a 	sub	r2,r2,r5
    85c4:	280ad07a 	srli	r5,r5,1
    85c8:	183ffb1e 	bne	r3,zero,85b8 <__umodsi3+0x34>
    85cc:	f800283a 	ret
    85d0:	f800283a 	ret
    85d4:	00c00044 	movi	r3,1
    85d8:	003ff706 	br	85b8 <__umodsi3+0x34>

000085dc <__floatunsisf>:
    85dc:	defffe04 	addi	sp,sp,-8
    85e0:	dfc00115 	stw	ra,4(sp)
    85e4:	dc000015 	stw	r16,0(sp)
    85e8:	20002c26 	beq	r4,zero,869c <__floatunsisf+0xc0>
    85ec:	2021883a 	mov	r16,r4
    85f0:	00087dc0 	call	87dc <__clzsi2>
    85f4:	00c02784 	movi	r3,158
    85f8:	1887c83a 	sub	r3,r3,r2
    85fc:	01002584 	movi	r4,150
    8600:	20c00f16 	blt	r4,r3,8640 <__floatunsisf+0x64>
    8604:	20c9c83a 	sub	r4,r4,r3
    8608:	8108983a 	sll	r4,r16,r4
    860c:	00802034 	movhi	r2,128
    8610:	10bfffc4 	addi	r2,r2,-1
    8614:	2088703a 	and	r4,r4,r2
    8618:	18803fcc 	andi	r2,r3,255
    861c:	100695fa 	slli	r3,r2,23
    8620:	00802034 	movhi	r2,128
    8624:	10bfffc4 	addi	r2,r2,-1
    8628:	2084703a 	and	r2,r4,r2
    862c:	10c4b03a 	or	r2,r2,r3
    8630:	dfc00117 	ldw	ra,4(sp)
    8634:	dc000017 	ldw	r16,0(sp)
    8638:	dec00204 	addi	sp,sp,8
    863c:	f800283a 	ret
    8640:	01002644 	movi	r4,153
    8644:	20c01816 	blt	r4,r3,86a8 <__floatunsisf+0xcc>
    8648:	20c9c83a 	sub	r4,r4,r3
    864c:	8108983a 	sll	r4,r16,r4
    8650:	017f0034 	movhi	r5,64512
    8654:	297fffc4 	addi	r5,r5,-1
    8658:	218001cc 	andi	r6,r4,7
    865c:	214a703a 	and	r5,r4,r5
    8660:	30000426 	beq	r6,zero,8674 <__floatunsisf+0x98>
    8664:	210003cc 	andi	r4,r4,15
    8668:	01800104 	movi	r6,4
    866c:	21800126 	beq	r4,r6,8674 <__floatunsisf+0x98>
    8670:	298b883a 	add	r5,r5,r6
    8674:	2901002c 	andhi	r4,r5,1024
    8678:	20000526 	beq	r4,zero,8690 <__floatunsisf+0xb4>
    867c:	00c027c4 	movi	r3,159
    8680:	1887c83a 	sub	r3,r3,r2
    8684:	00bf0034 	movhi	r2,64512
    8688:	10bfffc4 	addi	r2,r2,-1
    868c:	288a703a 	and	r5,r5,r2
    8690:	280891ba 	slli	r4,r5,6
    8694:	2008d27a 	srli	r4,r4,9
    8698:	003fdf06 	br	8618 <__floatunsisf+0x3c>
    869c:	0007883a 	mov	r3,zero
    86a0:	0009883a 	mov	r4,zero
    86a4:	003fdc06 	br	8618 <__floatunsisf+0x3c>
    86a8:	01402e44 	movi	r5,185
    86ac:	28cbc83a 	sub	r5,r5,r3
    86b0:	01000144 	movi	r4,5
    86b4:	2089c83a 	sub	r4,r4,r2
    86b8:	814a983a 	sll	r5,r16,r5
    86bc:	8108d83a 	srl	r4,r16,r4
    86c0:	2820c03a 	cmpne	r16,r5,zero
    86c4:	2408b03a 	or	r4,r4,r16
    86c8:	003fe106 	br	8650 <__floatunsisf+0x74>

000086cc <__extendsfdf2>:
    86cc:	200ad5fa 	srli	r5,r4,23
    86d0:	defffd04 	addi	sp,sp,-12
    86d4:	dc400115 	stw	r17,4(sp)
    86d8:	29403fcc 	andi	r5,r5,255
    86dc:	29800044 	addi	r6,r5,1
    86e0:	04402034 	movhi	r17,128
    86e4:	dc000015 	stw	r16,0(sp)
    86e8:	8c7fffc4 	addi	r17,r17,-1
    86ec:	dfc00215 	stw	ra,8(sp)
    86f0:	31803fcc 	andi	r6,r6,255
    86f4:	00800044 	movi	r2,1
    86f8:	8922703a 	and	r17,r17,r4
    86fc:	2020d7fa 	srli	r16,r4,31
    8700:	1180110e 	bge	r2,r6,8748 <__extendsfdf2+0x7c>
    8704:	880cd0fa 	srli	r6,r17,3
    8708:	8822977a 	slli	r17,r17,29
    870c:	2940e004 	addi	r5,r5,896
    8710:	2941ffcc 	andi	r5,r5,2047
    8714:	2804953a 	slli	r2,r5,20
    8718:	01400434 	movhi	r5,16
    871c:	800697fa 	slli	r3,r16,31
    8720:	297fffc4 	addi	r5,r5,-1
    8724:	314a703a 	and	r5,r6,r5
    8728:	288ab03a 	or	r5,r5,r2
    872c:	28c6b03a 	or	r3,r5,r3
    8730:	8805883a 	mov	r2,r17
    8734:	dfc00217 	ldw	ra,8(sp)
    8738:	dc400117 	ldw	r17,4(sp)
    873c:	dc000017 	ldw	r16,0(sp)
    8740:	dec00304 	addi	sp,sp,12
    8744:	f800283a 	ret
    8748:	2800111e 	bne	r5,zero,8790 <__extendsfdf2+0xc4>
    874c:	88001c26 	beq	r17,zero,87c0 <__extendsfdf2+0xf4>
    8750:	8809883a 	mov	r4,r17
    8754:	00087dc0 	call	87dc <__clzsi2>
    8758:	00c00284 	movi	r3,10
    875c:	18801b16 	blt	r3,r2,87cc <__extendsfdf2+0x100>
    8760:	018002c4 	movi	r6,11
    8764:	308dc83a 	sub	r6,r6,r2
    8768:	11000544 	addi	r4,r2,21
    876c:	8986d83a 	srl	r3,r17,r6
    8770:	8922983a 	sll	r17,r17,r4
    8774:	0180e244 	movi	r6,905
    8778:	01400434 	movhi	r5,16
    877c:	3085c83a 	sub	r2,r6,r2
    8780:	297fffc4 	addi	r5,r5,-1
    8784:	194c703a 	and	r6,r3,r5
    8788:	1141ffcc 	andi	r5,r2,2047
    878c:	003fe006 	br	8710 <__extendsfdf2+0x44>
    8790:	88000826 	beq	r17,zero,87b4 <__extendsfdf2+0xe8>
    8794:	880cd0fa 	srli	r6,r17,3
    8798:	00800434 	movhi	r2,16
    879c:	10bfffc4 	addi	r2,r2,-1
    87a0:	31800234 	orhi	r6,r6,8
    87a4:	8822977a 	slli	r17,r17,29
    87a8:	308c703a 	and	r6,r6,r2
    87ac:	0141ffc4 	movi	r5,2047
    87b0:	003fd706 	br	8710 <__extendsfdf2+0x44>
    87b4:	0141ffc4 	movi	r5,2047
    87b8:	000d883a 	mov	r6,zero
    87bc:	003fd406 	br	8710 <__extendsfdf2+0x44>
    87c0:	000b883a 	mov	r5,zero
    87c4:	000d883a 	mov	r6,zero
    87c8:	003fd106 	br	8710 <__extendsfdf2+0x44>
    87cc:	11bffd44 	addi	r6,r2,-11
    87d0:	8986983a 	sll	r3,r17,r6
    87d4:	0023883a 	mov	r17,zero
    87d8:	003fe606 	br	8774 <__extendsfdf2+0xa8>

000087dc <__clzsi2>:
    87dc:	00bfffd4 	movui	r2,65535
    87e0:	11000536 	bltu	r2,r4,87f8 <__clzsi2+0x1c>
    87e4:	00803fc4 	movi	r2,255
    87e8:	11000f36 	bltu	r2,r4,8828 <__clzsi2+0x4c>
    87ec:	00800804 	movi	r2,32
    87f0:	0007883a 	mov	r3,zero
    87f4:	00000506 	br	880c <__clzsi2+0x30>
    87f8:	00804034 	movhi	r2,256
    87fc:	10bfffc4 	addi	r2,r2,-1
    8800:	11000c2e 	bgeu	r2,r4,8834 <__clzsi2+0x58>
    8804:	00800204 	movi	r2,8
    8808:	00c00604 	movi	r3,24
    880c:	20c8d83a 	srl	r4,r4,r3
    8810:	00c00074 	movhi	r3,1
    8814:	18e52004 	addi	r3,r3,-27520
    8818:	1909883a 	add	r4,r3,r4
    881c:	20c00003 	ldbu	r3,0(r4)
    8820:	10c5c83a 	sub	r2,r2,r3
    8824:	f800283a 	ret
    8828:	00800604 	movi	r2,24
    882c:	00c00204 	movi	r3,8
    8830:	003ff606 	br	880c <__clzsi2+0x30>
    8834:	00800404 	movi	r2,16
    8838:	1007883a 	mov	r3,r2
    883c:	003ff306 	br	880c <__clzsi2+0x30>

00008840 <_printf_r>:
    8840:	defffd04 	addi	sp,sp,-12
    8844:	dfc00015 	stw	ra,0(sp)
    8848:	d9800115 	stw	r6,4(sp)
    884c:	d9c00215 	stw	r7,8(sp)
    8850:	20c00217 	ldw	r3,8(r4)
    8854:	01800074 	movhi	r6,1
    8858:	31a39f04 	addi	r6,r6,-29060
    885c:	19800115 	stw	r6,4(r3)
    8860:	280d883a 	mov	r6,r5
    8864:	21400217 	ldw	r5,8(r4)
    8868:	d9c00104 	addi	r7,sp,4
    886c:	00089340 	call	8934 <___vfprintf_internal_r>
    8870:	dfc00017 	ldw	ra,0(sp)
    8874:	dec00304 	addi	sp,sp,12
    8878:	f800283a 	ret

0000887c <printf>:
    887c:	defffc04 	addi	sp,sp,-16
    8880:	dfc00015 	stw	ra,0(sp)
    8884:	d9400115 	stw	r5,4(sp)
    8888:	d9800215 	stw	r6,8(sp)
    888c:	d9c00315 	stw	r7,12(sp)
    8890:	00800074 	movhi	r2,1
    8894:	10a59d04 	addi	r2,r2,-27020
    8898:	10800017 	ldw	r2,0(r2)
    889c:	01400074 	movhi	r5,1
    88a0:	29639f04 	addi	r5,r5,-29060
    88a4:	10c00217 	ldw	r3,8(r2)
    88a8:	d9800104 	addi	r6,sp,4
    88ac:	19400115 	stw	r5,4(r3)
    88b0:	200b883a 	mov	r5,r4
    88b4:	11000217 	ldw	r4,8(r2)
    88b8:	0008e600 	call	8e60 <__vfprintf_internal>
    88bc:	dfc00017 	ldw	ra,0(sp)
    88c0:	dec00404 	addi	sp,sp,16
    88c4:	f800283a 	ret

000088c8 <print_repeat>:
    88c8:	defffb04 	addi	sp,sp,-20
    88cc:	dc800315 	stw	r18,12(sp)
    88d0:	dc400215 	stw	r17,8(sp)
    88d4:	dc000115 	stw	r16,4(sp)
    88d8:	dfc00415 	stw	ra,16(sp)
    88dc:	2025883a 	mov	r18,r4
    88e0:	2823883a 	mov	r17,r5
    88e4:	d9800005 	stb	r6,0(sp)
    88e8:	3821883a 	mov	r16,r7
    88ec:	04000a0e 	bge	zero,r16,8918 <print_repeat+0x50>
    88f0:	88800117 	ldw	r2,4(r17)
    88f4:	01c00044 	movi	r7,1
    88f8:	d80d883a 	mov	r6,sp
    88fc:	880b883a 	mov	r5,r17
    8900:	9009883a 	mov	r4,r18
    8904:	103ee83a 	callr	r2
    8908:	843fffc4 	addi	r16,r16,-1
    890c:	103ff726 	beq	r2,zero,88ec <print_repeat+0x24>
    8910:	00bfffc4 	movi	r2,-1
    8914:	00000106 	br	891c <print_repeat+0x54>
    8918:	0005883a 	mov	r2,zero
    891c:	dfc00417 	ldw	ra,16(sp)
    8920:	dc800317 	ldw	r18,12(sp)
    8924:	dc400217 	ldw	r17,8(sp)
    8928:	dc000117 	ldw	r16,4(sp)
    892c:	dec00504 	addi	sp,sp,20
    8930:	f800283a 	ret

00008934 <___vfprintf_internal_r>:
    8934:	deffe504 	addi	sp,sp,-108
    8938:	d8c00804 	addi	r3,sp,32
    893c:	ddc01815 	stw	r23,96(sp)
    8940:	dd801715 	stw	r22,92(sp)
    8944:	dd401615 	stw	r21,88(sp)
    8948:	dd001515 	stw	r20,84(sp)
    894c:	dcc01415 	stw	r19,80(sp)
    8950:	dc801315 	stw	r18,76(sp)
    8954:	dc401215 	stw	r17,72(sp)
    8958:	dc001115 	stw	r16,68(sp)
    895c:	dfc01a15 	stw	ra,104(sp)
    8960:	df001915 	stw	fp,100(sp)
    8964:	2029883a 	mov	r20,r4
    8968:	2823883a 	mov	r17,r5
    896c:	382d883a 	mov	r22,r7
    8970:	d9800f15 	stw	r6,60(sp)
    8974:	0021883a 	mov	r16,zero
    8978:	d8000e15 	stw	zero,56(sp)
    897c:	d8000a15 	stw	zero,40(sp)
    8980:	002b883a 	mov	r21,zero
    8984:	0027883a 	mov	r19,zero
    8988:	0025883a 	mov	r18,zero
    898c:	d8000c15 	stw	zero,48(sp)
    8990:	d8000b15 	stw	zero,44(sp)
    8994:	002f883a 	mov	r23,zero
    8998:	d8c00915 	stw	r3,36(sp)
    899c:	d8c00f17 	ldw	r3,60(sp)
    89a0:	19000003 	ldbu	r4,0(r3)
    89a4:	20803fcc 	andi	r2,r4,255
    89a8:	1080201c 	xori	r2,r2,128
    89ac:	10bfe004 	addi	r2,r2,-128
    89b0:	10011e26 	beq	r2,zero,8e2c <___vfprintf_internal_r+0x4f8>
    89b4:	00c00044 	movi	r3,1
    89b8:	b8c01426 	beq	r23,r3,8a0c <___vfprintf_internal_r+0xd8>
    89bc:	1dc00216 	blt	r3,r23,89c8 <___vfprintf_internal_r+0x94>
    89c0:	b8000626 	beq	r23,zero,89dc <___vfprintf_internal_r+0xa8>
    89c4:	00011506 	br	8e1c <___vfprintf_internal_r+0x4e8>
    89c8:	01400084 	movi	r5,2
    89cc:	b9401d26 	beq	r23,r5,8a44 <___vfprintf_internal_r+0x110>
    89d0:	014000c4 	movi	r5,3
    89d4:	b9402b26 	beq	r23,r5,8a84 <___vfprintf_internal_r+0x150>
    89d8:	00011006 	br	8e1c <___vfprintf_internal_r+0x4e8>
    89dc:	01400944 	movi	r5,37
    89e0:	1140fc26 	beq	r2,r5,8dd4 <___vfprintf_internal_r+0x4a0>
    89e4:	88800117 	ldw	r2,4(r17)
    89e8:	d9000005 	stb	r4,0(sp)
    89ec:	01c00044 	movi	r7,1
    89f0:	d80d883a 	mov	r6,sp
    89f4:	880b883a 	mov	r5,r17
    89f8:	a009883a 	mov	r4,r20
    89fc:	103ee83a 	callr	r2
    8a00:	1000d81e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8a04:	84000044 	addi	r16,r16,1
    8a08:	00010406 	br	8e1c <___vfprintf_internal_r+0x4e8>
    8a0c:	01400c04 	movi	r5,48
    8a10:	1140fa26 	beq	r2,r5,8dfc <___vfprintf_internal_r+0x4c8>
    8a14:	01400944 	movi	r5,37
    8a18:	11400a1e 	bne	r2,r5,8a44 <___vfprintf_internal_r+0x110>
    8a1c:	d8800005 	stb	r2,0(sp)
    8a20:	88800117 	ldw	r2,4(r17)
    8a24:	b80f883a 	mov	r7,r23
    8a28:	d80d883a 	mov	r6,sp
    8a2c:	880b883a 	mov	r5,r17
    8a30:	a009883a 	mov	r4,r20
    8a34:	103ee83a 	callr	r2
    8a38:	1000ca1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8a3c:	84000044 	addi	r16,r16,1
    8a40:	0000f506 	br	8e18 <___vfprintf_internal_r+0x4e4>
    8a44:	25fff404 	addi	r23,r4,-48
    8a48:	bdc03fcc 	andi	r23,r23,255
    8a4c:	00c00244 	movi	r3,9
    8a50:	1dc00936 	bltu	r3,r23,8a78 <___vfprintf_internal_r+0x144>
    8a54:	00bfffc4 	movi	r2,-1
    8a58:	90800426 	beq	r18,r2,8a6c <___vfprintf_internal_r+0x138>
    8a5c:	01400284 	movi	r5,10
    8a60:	9009883a 	mov	r4,r18
    8a64:	0008fa80 	call	8fa8 <__mulsi3>
    8a68:	00000106 	br	8a70 <___vfprintf_internal_r+0x13c>
    8a6c:	0005883a 	mov	r2,zero
    8a70:	b8a5883a 	add	r18,r23,r2
    8a74:	0000e206 	br	8e00 <___vfprintf_internal_r+0x4cc>
    8a78:	01400b84 	movi	r5,46
    8a7c:	1140e426 	beq	r2,r5,8e10 <___vfprintf_internal_r+0x4dc>
    8a80:	05c00084 	movi	r23,2
    8a84:	213ff404 	addi	r4,r4,-48
    8a88:	27003fcc 	andi	fp,r4,255
    8a8c:	00c00244 	movi	r3,9
    8a90:	1f000936 	bltu	r3,fp,8ab8 <___vfprintf_internal_r+0x184>
    8a94:	00bfffc4 	movi	r2,-1
    8a98:	98800426 	beq	r19,r2,8aac <___vfprintf_internal_r+0x178>
    8a9c:	01400284 	movi	r5,10
    8aa0:	9809883a 	mov	r4,r19
    8aa4:	0008fa80 	call	8fa8 <__mulsi3>
    8aa8:	00000106 	br	8ab0 <___vfprintf_internal_r+0x17c>
    8aac:	0005883a 	mov	r2,zero
    8ab0:	e0a7883a 	add	r19,fp,r2
    8ab4:	0000d906 	br	8e1c <___vfprintf_internal_r+0x4e8>
    8ab8:	00c01b04 	movi	r3,108
    8abc:	10c0d226 	beq	r2,r3,8e08 <___vfprintf_internal_r+0x4d4>
    8ac0:	013fffc4 	movi	r4,-1
    8ac4:	99000226 	beq	r19,r4,8ad0 <___vfprintf_internal_r+0x19c>
    8ac8:	d8000b15 	stw	zero,44(sp)
    8acc:	00000106 	br	8ad4 <___vfprintf_internal_r+0x1a0>
    8ad0:	04c00044 	movi	r19,1
    8ad4:	01001a44 	movi	r4,105
    8ad8:	11001626 	beq	r2,r4,8b34 <___vfprintf_internal_r+0x200>
    8adc:	20800916 	blt	r4,r2,8b04 <___vfprintf_internal_r+0x1d0>
    8ae0:	010018c4 	movi	r4,99
    8ae4:	11008826 	beq	r2,r4,8d08 <___vfprintf_internal_r+0x3d4>
    8ae8:	01001904 	movi	r4,100
    8aec:	11001126 	beq	r2,r4,8b34 <___vfprintf_internal_r+0x200>
    8af0:	01001604 	movi	r4,88
    8af4:	1100c81e 	bne	r2,r4,8e18 <___vfprintf_internal_r+0x4e4>
    8af8:	00c00044 	movi	r3,1
    8afc:	d8c00e15 	stw	r3,56(sp)
    8b00:	00001506 	br	8b58 <___vfprintf_internal_r+0x224>
    8b04:	01001cc4 	movi	r4,115
    8b08:	11009826 	beq	r2,r4,8d6c <___vfprintf_internal_r+0x438>
    8b0c:	20800416 	blt	r4,r2,8b20 <___vfprintf_internal_r+0x1ec>
    8b10:	01001bc4 	movi	r4,111
    8b14:	1100c01e 	bne	r2,r4,8e18 <___vfprintf_internal_r+0x4e4>
    8b18:	05400204 	movi	r21,8
    8b1c:	00000f06 	br	8b5c <___vfprintf_internal_r+0x228>
    8b20:	01001d44 	movi	r4,117
    8b24:	11000d26 	beq	r2,r4,8b5c <___vfprintf_internal_r+0x228>
    8b28:	01001e04 	movi	r4,120
    8b2c:	11000a26 	beq	r2,r4,8b58 <___vfprintf_internal_r+0x224>
    8b30:	0000b906 	br	8e18 <___vfprintf_internal_r+0x4e4>
    8b34:	d8c00a17 	ldw	r3,40(sp)
    8b38:	b7000104 	addi	fp,r22,4
    8b3c:	18000726 	beq	r3,zero,8b5c <___vfprintf_internal_r+0x228>
    8b40:	df000d15 	stw	fp,52(sp)
    8b44:	b5c00017 	ldw	r23,0(r22)
    8b48:	b800080e 	bge	r23,zero,8b6c <___vfprintf_internal_r+0x238>
    8b4c:	05efc83a 	sub	r23,zero,r23
    8b50:	02400044 	movi	r9,1
    8b54:	00000606 	br	8b70 <___vfprintf_internal_r+0x23c>
    8b58:	05400404 	movi	r21,16
    8b5c:	b0c00104 	addi	r3,r22,4
    8b60:	d8c00d15 	stw	r3,52(sp)
    8b64:	b5c00017 	ldw	r23,0(r22)
    8b68:	d8000a15 	stw	zero,40(sp)
    8b6c:	0013883a 	mov	r9,zero
    8b70:	d839883a 	mov	fp,sp
    8b74:	b8001726 	beq	r23,zero,8bd4 <___vfprintf_internal_r+0x2a0>
    8b78:	a80b883a 	mov	r5,r21
    8b7c:	b809883a 	mov	r4,r23
    8b80:	da401015 	stw	r9,64(sp)
    8b84:	00085200 	call	8520 <__udivsi3>
    8b88:	a80b883a 	mov	r5,r21
    8b8c:	1009883a 	mov	r4,r2
    8b90:	102d883a 	mov	r22,r2
    8b94:	0008fa80 	call	8fa8 <__mulsi3>
    8b98:	b885c83a 	sub	r2,r23,r2
    8b9c:	00c00244 	movi	r3,9
    8ba0:	da401017 	ldw	r9,64(sp)
    8ba4:	18800216 	blt	r3,r2,8bb0 <___vfprintf_internal_r+0x27c>
    8ba8:	10800c04 	addi	r2,r2,48
    8bac:	00000506 	br	8bc4 <___vfprintf_internal_r+0x290>
    8bb0:	d8c00e17 	ldw	r3,56(sp)
    8bb4:	18000226 	beq	r3,zero,8bc0 <___vfprintf_internal_r+0x28c>
    8bb8:	10800dc4 	addi	r2,r2,55
    8bbc:	00000106 	br	8bc4 <___vfprintf_internal_r+0x290>
    8bc0:	108015c4 	addi	r2,r2,87
    8bc4:	e0800005 	stb	r2,0(fp)
    8bc8:	b02f883a 	mov	r23,r22
    8bcc:	e7000044 	addi	fp,fp,1
    8bd0:	003fe806 	br	8b74 <___vfprintf_internal_r+0x240>
    8bd4:	e6efc83a 	sub	r23,fp,sp
    8bd8:	9dc5c83a 	sub	r2,r19,r23
    8bdc:	0080090e 	bge	zero,r2,8c04 <___vfprintf_internal_r+0x2d0>
    8be0:	e085883a 	add	r2,fp,r2
    8be4:	01400c04 	movi	r5,48
    8be8:	d8c00917 	ldw	r3,36(sp)
    8bec:	e009883a 	mov	r4,fp
    8bf0:	e0c0032e 	bgeu	fp,r3,8c00 <___vfprintf_internal_r+0x2cc>
    8bf4:	e7000044 	addi	fp,fp,1
    8bf8:	21400005 	stb	r5,0(r4)
    8bfc:	e0bffa1e 	bne	fp,r2,8be8 <___vfprintf_internal_r+0x2b4>
    8c00:	e6efc83a 	sub	r23,fp,sp
    8c04:	d8c00b17 	ldw	r3,44(sp)
    8c08:	4dd1883a 	add	r8,r9,r23
    8c0c:	922dc83a 	sub	r22,r18,r8
    8c10:	18001626 	beq	r3,zero,8c6c <___vfprintf_internal_r+0x338>
    8c14:	48000a26 	beq	r9,zero,8c40 <___vfprintf_internal_r+0x30c>
    8c18:	00800b44 	movi	r2,45
    8c1c:	d8800805 	stb	r2,32(sp)
    8c20:	88800117 	ldw	r2,4(r17)
    8c24:	01c00044 	movi	r7,1
    8c28:	d9800804 	addi	r6,sp,32
    8c2c:	880b883a 	mov	r5,r17
    8c30:	a009883a 	mov	r4,r20
    8c34:	103ee83a 	callr	r2
    8c38:	10004a1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8c3c:	84000044 	addi	r16,r16,1
    8c40:	0580070e 	bge	zero,r22,8c60 <___vfprintf_internal_r+0x32c>
    8c44:	b00f883a 	mov	r7,r22
    8c48:	01800c04 	movi	r6,48
    8c4c:	880b883a 	mov	r5,r17
    8c50:	a009883a 	mov	r4,r20
    8c54:	00088c80 	call	88c8 <print_repeat>
    8c58:	1000421e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8c5c:	85a1883a 	add	r16,r16,r22
    8c60:	e02d883a 	mov	r22,fp
    8c64:	bf2fc83a 	sub	r23,r23,fp
    8c68:	00002006 	br	8cec <___vfprintf_internal_r+0x3b8>
    8c6c:	0580090e 	bge	zero,r22,8c94 <___vfprintf_internal_r+0x360>
    8c70:	b00f883a 	mov	r7,r22
    8c74:	01800804 	movi	r6,32
    8c78:	880b883a 	mov	r5,r17
    8c7c:	a009883a 	mov	r4,r20
    8c80:	da401015 	stw	r9,64(sp)
    8c84:	00088c80 	call	88c8 <print_repeat>
    8c88:	da401017 	ldw	r9,64(sp)
    8c8c:	1000351e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8c90:	85a1883a 	add	r16,r16,r22
    8c94:	483ff226 	beq	r9,zero,8c60 <___vfprintf_internal_r+0x32c>
    8c98:	00800b44 	movi	r2,45
    8c9c:	d8800805 	stb	r2,32(sp)
    8ca0:	88800117 	ldw	r2,4(r17)
    8ca4:	01c00044 	movi	r7,1
    8ca8:	d9800804 	addi	r6,sp,32
    8cac:	880b883a 	mov	r5,r17
    8cb0:	a009883a 	mov	r4,r20
    8cb4:	103ee83a 	callr	r2
    8cb8:	10002a1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8cbc:	84000044 	addi	r16,r16,1
    8cc0:	003fe706 	br	8c60 <___vfprintf_internal_r+0x32c>
    8cc4:	b5bfffc4 	addi	r22,r22,-1
    8cc8:	b0800003 	ldbu	r2,0(r22)
    8ccc:	01c00044 	movi	r7,1
    8cd0:	d9800804 	addi	r6,sp,32
    8cd4:	d8800805 	stb	r2,32(sp)
    8cd8:	88800117 	ldw	r2,4(r17)
    8cdc:	880b883a 	mov	r5,r17
    8ce0:	a009883a 	mov	r4,r20
    8ce4:	103ee83a 	callr	r2
    8ce8:	10001e1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8cec:	8585c83a 	sub	r2,r16,r22
    8cf0:	b5c9883a 	add	r4,r22,r23
    8cf4:	e085883a 	add	r2,fp,r2
    8cf8:	013ff216 	blt	zero,r4,8cc4 <___vfprintf_internal_r+0x390>
    8cfc:	1021883a 	mov	r16,r2
    8d00:	dd800d17 	ldw	r22,52(sp)
    8d04:	00004406 	br	8e18 <___vfprintf_internal_r+0x4e4>
    8d08:	00800044 	movi	r2,1
    8d0c:	1480080e 	bge	r2,r18,8d30 <___vfprintf_internal_r+0x3fc>
    8d10:	95ffffc4 	addi	r23,r18,-1
    8d14:	b80f883a 	mov	r7,r23
    8d18:	01800804 	movi	r6,32
    8d1c:	880b883a 	mov	r5,r17
    8d20:	a009883a 	mov	r4,r20
    8d24:	00088c80 	call	88c8 <print_repeat>
    8d28:	10000e1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8d2c:	85e1883a 	add	r16,r16,r23
    8d30:	b0800017 	ldw	r2,0(r22)
    8d34:	01c00044 	movi	r7,1
    8d38:	d80d883a 	mov	r6,sp
    8d3c:	d8800005 	stb	r2,0(sp)
    8d40:	88800117 	ldw	r2,4(r17)
    8d44:	880b883a 	mov	r5,r17
    8d48:	a009883a 	mov	r4,r20
    8d4c:	b5c00104 	addi	r23,r22,4
    8d50:	103ee83a 	callr	r2
    8d54:	1000031e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8d58:	84000044 	addi	r16,r16,1
    8d5c:	b82d883a 	mov	r22,r23
    8d60:	00002d06 	br	8e18 <___vfprintf_internal_r+0x4e4>
    8d64:	00bfffc4 	movi	r2,-1
    8d68:	00003106 	br	8e30 <___vfprintf_internal_r+0x4fc>
    8d6c:	b5c00017 	ldw	r23,0(r22)
    8d70:	b7000104 	addi	fp,r22,4
    8d74:	b809883a 	mov	r4,r23
    8d78:	0008f340 	call	8f34 <strlen>
    8d7c:	9091c83a 	sub	r8,r18,r2
    8d80:	102d883a 	mov	r22,r2
    8d84:	0200090e 	bge	zero,r8,8dac <___vfprintf_internal_r+0x478>
    8d88:	400f883a 	mov	r7,r8
    8d8c:	01800804 	movi	r6,32
    8d90:	880b883a 	mov	r5,r17
    8d94:	a009883a 	mov	r4,r20
    8d98:	da001015 	stw	r8,64(sp)
    8d9c:	00088c80 	call	88c8 <print_repeat>
    8da0:	da001017 	ldw	r8,64(sp)
    8da4:	103fef1e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8da8:	8221883a 	add	r16,r16,r8
    8dac:	88800117 	ldw	r2,4(r17)
    8db0:	b00f883a 	mov	r7,r22
    8db4:	b80d883a 	mov	r6,r23
    8db8:	880b883a 	mov	r5,r17
    8dbc:	a009883a 	mov	r4,r20
    8dc0:	103ee83a 	callr	r2
    8dc4:	103fe71e 	bne	r2,zero,8d64 <___vfprintf_internal_r+0x430>
    8dc8:	85a1883a 	add	r16,r16,r22
    8dcc:	e02d883a 	mov	r22,fp
    8dd0:	00001106 	br	8e18 <___vfprintf_internal_r+0x4e4>
    8dd4:	00c00044 	movi	r3,1
    8dd8:	04ffffc4 	movi	r19,-1
    8ddc:	d8000e15 	stw	zero,56(sp)
    8de0:	d8c00a15 	stw	r3,40(sp)
    8de4:	05400284 	movi	r21,10
    8de8:	9825883a 	mov	r18,r19
    8dec:	d8000c15 	stw	zero,48(sp)
    8df0:	d8000b15 	stw	zero,44(sp)
    8df4:	182f883a 	mov	r23,r3
    8df8:	00000806 	br	8e1c <___vfprintf_internal_r+0x4e8>
    8dfc:	ddc00b15 	stw	r23,44(sp)
    8e00:	05c00084 	movi	r23,2
    8e04:	00000506 	br	8e1c <___vfprintf_internal_r+0x4e8>
    8e08:	00c00044 	movi	r3,1
    8e0c:	d8c00c15 	stw	r3,48(sp)
    8e10:	05c000c4 	movi	r23,3
    8e14:	00000106 	br	8e1c <___vfprintf_internal_r+0x4e8>
    8e18:	002f883a 	mov	r23,zero
    8e1c:	d8c00f17 	ldw	r3,60(sp)
    8e20:	18c00044 	addi	r3,r3,1
    8e24:	d8c00f15 	stw	r3,60(sp)
    8e28:	003edc06 	br	899c <___vfprintf_internal_r+0x68>
    8e2c:	8005883a 	mov	r2,r16
    8e30:	dfc01a17 	ldw	ra,104(sp)
    8e34:	df001917 	ldw	fp,100(sp)
    8e38:	ddc01817 	ldw	r23,96(sp)
    8e3c:	dd801717 	ldw	r22,92(sp)
    8e40:	dd401617 	ldw	r21,88(sp)
    8e44:	dd001517 	ldw	r20,84(sp)
    8e48:	dcc01417 	ldw	r19,80(sp)
    8e4c:	dc801317 	ldw	r18,76(sp)
    8e50:	dc401217 	ldw	r17,72(sp)
    8e54:	dc001117 	ldw	r16,68(sp)
    8e58:	dec01b04 	addi	sp,sp,108
    8e5c:	f800283a 	ret

00008e60 <__vfprintf_internal>:
    8e60:	00800074 	movhi	r2,1
    8e64:	10a59d04 	addi	r2,r2,-27020
    8e68:	300f883a 	mov	r7,r6
    8e6c:	280d883a 	mov	r6,r5
    8e70:	200b883a 	mov	r5,r4
    8e74:	11000017 	ldw	r4,0(r2)
    8e78:	00089341 	jmpi	8934 <___vfprintf_internal_r>

00008e7c <__sfvwrite_small_dev>:
    8e7c:	2880000b 	ldhu	r2,0(r5)
    8e80:	1080020c 	andi	r2,r2,8
    8e84:	10002126 	beq	r2,zero,8f0c <__sfvwrite_small_dev+0x90>
    8e88:	2880008f 	ldh	r2,2(r5)
    8e8c:	defffa04 	addi	sp,sp,-24
    8e90:	dc000015 	stw	r16,0(sp)
    8e94:	dfc00515 	stw	ra,20(sp)
    8e98:	dd000415 	stw	r20,16(sp)
    8e9c:	dcc00315 	stw	r19,12(sp)
    8ea0:	dc800215 	stw	r18,8(sp)
    8ea4:	dc400115 	stw	r17,4(sp)
    8ea8:	2821883a 	mov	r16,r5
    8eac:	10001216 	blt	r2,zero,8ef8 <__sfvwrite_small_dev+0x7c>
    8eb0:	2027883a 	mov	r19,r4
    8eb4:	3025883a 	mov	r18,r6
    8eb8:	3823883a 	mov	r17,r7
    8ebc:	05010004 	movi	r20,1024
    8ec0:	04400b0e 	bge	zero,r17,8ef0 <__sfvwrite_small_dev+0x74>
    8ec4:	880f883a 	mov	r7,r17
    8ec8:	a440010e 	bge	r20,r17,8ed0 <__sfvwrite_small_dev+0x54>
    8ecc:	01c10004 	movi	r7,1024
    8ed0:	8140008f 	ldh	r5,2(r16)
    8ed4:	900d883a 	mov	r6,r18
    8ed8:	9809883a 	mov	r4,r19
    8edc:	0008f500 	call	8f50 <_write_r>
    8ee0:	0080050e 	bge	zero,r2,8ef8 <__sfvwrite_small_dev+0x7c>
    8ee4:	88a3c83a 	sub	r17,r17,r2
    8ee8:	90a5883a 	add	r18,r18,r2
    8eec:	003ff406 	br	8ec0 <__sfvwrite_small_dev+0x44>
    8ef0:	0005883a 	mov	r2,zero
    8ef4:	00000706 	br	8f14 <__sfvwrite_small_dev+0x98>
    8ef8:	8080000b 	ldhu	r2,0(r16)
    8efc:	10801014 	ori	r2,r2,64
    8f00:	8080000d 	sth	r2,0(r16)
    8f04:	00bfffc4 	movi	r2,-1
    8f08:	00000206 	br	8f14 <__sfvwrite_small_dev+0x98>
    8f0c:	00bfffc4 	movi	r2,-1
    8f10:	f800283a 	ret
    8f14:	dfc00517 	ldw	ra,20(sp)
    8f18:	dd000417 	ldw	r20,16(sp)
    8f1c:	dcc00317 	ldw	r19,12(sp)
    8f20:	dc800217 	ldw	r18,8(sp)
    8f24:	dc400117 	ldw	r17,4(sp)
    8f28:	dc000017 	ldw	r16,0(sp)
    8f2c:	dec00604 	addi	sp,sp,24
    8f30:	f800283a 	ret

00008f34 <strlen>:
    8f34:	2005883a 	mov	r2,r4
    8f38:	10c00007 	ldb	r3,0(r2)
    8f3c:	18000226 	beq	r3,zero,8f48 <strlen+0x14>
    8f40:	10800044 	addi	r2,r2,1
    8f44:	003ffc06 	br	8f38 <strlen+0x4>
    8f48:	1105c83a 	sub	r2,r2,r4
    8f4c:	f800283a 	ret

00008f50 <_write_r>:
    8f50:	defffd04 	addi	sp,sp,-12
    8f54:	dc000015 	stw	r16,0(sp)
    8f58:	04000074 	movhi	r16,1
    8f5c:	dc400115 	stw	r17,4(sp)
    8f60:	8425ec04 	addi	r16,r16,-26704
    8f64:	2023883a 	mov	r17,r4
    8f68:	2809883a 	mov	r4,r5
    8f6c:	300b883a 	mov	r5,r6
    8f70:	380d883a 	mov	r6,r7
    8f74:	dfc00215 	stw	ra,8(sp)
    8f78:	80000015 	stw	zero,0(r16)
    8f7c:	000921c0 	call	921c <write>
    8f80:	00ffffc4 	movi	r3,-1
    8f84:	10c0031e 	bne	r2,r3,8f94 <_write_r+0x44>
    8f88:	80c00017 	ldw	r3,0(r16)
    8f8c:	18000126 	beq	r3,zero,8f94 <_write_r+0x44>
    8f90:	88c00015 	stw	r3,0(r17)
    8f94:	dfc00217 	ldw	ra,8(sp)
    8f98:	dc400117 	ldw	r17,4(sp)
    8f9c:	dc000017 	ldw	r16,0(sp)
    8fa0:	dec00304 	addi	sp,sp,12
    8fa4:	f800283a 	ret

00008fa8 <__mulsi3>:
    8fa8:	0005883a 	mov	r2,zero
    8fac:	20000726 	beq	r4,zero,8fcc <__mulsi3+0x24>
    8fb0:	20c0004c 	andi	r3,r4,1
    8fb4:	2008d07a 	srli	r4,r4,1
    8fb8:	18000126 	beq	r3,zero,8fc0 <__mulsi3+0x18>
    8fbc:	1145883a 	add	r2,r2,r5
    8fc0:	294b883a 	add	r5,r5,r5
    8fc4:	203ffa1e 	bne	r4,zero,8fb0 <__mulsi3+0x8>
    8fc8:	f800283a 	ret
    8fcc:	f800283a 	ret

00008fd0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    8fd0:	000906c1 	jmpi	906c <alt_iic_isr_register>

00008fd4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8fd4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8fd8:	00bfff84 	movi	r2,-2
    8fdc:	3084703a 	and	r2,r6,r2
    8fe0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    8fe4:	00800074 	movhi	r2,1
    8fe8:	10a5ed04 	addi	r2,r2,-26700
    8fec:	01000044 	movi	r4,1
    8ff0:	10c00017 	ldw	r3,0(r2)
    8ff4:	214a983a 	sll	r5,r4,r5
    8ff8:	28cab03a 	or	r5,r5,r3
    8ffc:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9000:	10800017 	ldw	r2,0(r2)
    9004:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9008:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    900c:	0005883a 	mov	r2,zero
    9010:	f800283a 	ret

00009014 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9014:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9018:	00bfff84 	movi	r2,-2
    901c:	3084703a 	and	r2,r6,r2
    9020:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    9024:	00800074 	movhi	r2,1
    9028:	10a5ed04 	addi	r2,r2,-26700
    902c:	013fff84 	movi	r4,-2
    9030:	10c00017 	ldw	r3,0(r2)
    9034:	214a183a 	rol	r5,r4,r5
    9038:	28ca703a 	and	r5,r5,r3
    903c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9040:	10800017 	ldw	r2,0(r2)
    9044:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9048:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    904c:	0005883a 	mov	r2,zero
    9050:	f800283a 	ret

00009054 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9054:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9058:	00800044 	movi	r2,1
    905c:	1144983a 	sll	r2,r2,r5
    9060:	10c4703a 	and	r2,r2,r3
}
    9064:	1004c03a 	cmpne	r2,r2,zero
    9068:	f800283a 	ret

0000906c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    906c:	00c007c4 	movi	r3,31
    9070:	19401616 	blt	r3,r5,90cc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9074:	defffe04 	addi	sp,sp,-8
    9078:	dfc00115 	stw	ra,4(sp)
    907c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9080:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9084:	00ffff84 	movi	r3,-2
    9088:	80c6703a 	and	r3,r16,r3
    908c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    9090:	280490fa 	slli	r2,r5,3
    9094:	00c00074 	movhi	r3,1
    9098:	18e5f204 	addi	r3,r3,-26680
    909c:	1885883a 	add	r2,r3,r2
    90a0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    90a4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    90a8:	30000226 	beq	r6,zero,90b4 <alt_iic_isr_register+0x48>
    90ac:	0008fd40 	call	8fd4 <alt_ic_irq_enable>
    90b0:	00000106 	br	90b8 <alt_iic_isr_register+0x4c>
    90b4:	00090140 	call	9014 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    90b8:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    90bc:	dfc00117 	ldw	ra,4(sp)
    90c0:	dc000017 	ldw	r16,0(sp)
    90c4:	dec00204 	addi	sp,sp,8
    90c8:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    90cc:	00bffa84 	movi	r2,-22
    90d0:	f800283a 	ret

000090d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    90d4:	deffff04 	addi	sp,sp,-4
    90d8:	01000074 	movhi	r4,1
    90dc:	01400074 	movhi	r5,1
    90e0:	dfc00015 	stw	ra,0(sp)
    90e4:	21256004 	addi	r4,r4,-27264
    90e8:	2965a104 	addi	r5,r5,-27004

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    90ec:	2140061e 	bne	r4,r5,9108 <alt_load+0x34>
    90f0:	01000074 	movhi	r4,1
    90f4:	01400074 	movhi	r5,1
    90f8:	21200804 	addi	r4,r4,-32736
    90fc:	29600804 	addi	r5,r5,-32736
    9100:	2140121e 	bne	r4,r5,914c <alt_load+0x78>
    9104:	00000b06 	br	9134 <alt_load+0x60>
    9108:	00c00074 	movhi	r3,1
    910c:	18e5a104 	addi	r3,r3,-27004
    9110:	1907c83a 	sub	r3,r3,r4
    9114:	0005883a 	mov	r2,zero
  {
    while( to != end )
    9118:	10fff526 	beq	r2,r3,90f0 <alt_load+0x1c>
    {
      *to++ = *from++;
    911c:	114f883a 	add	r7,r2,r5
    9120:	39c00017 	ldw	r7,0(r7)
    9124:	110d883a 	add	r6,r2,r4
    9128:	10800104 	addi	r2,r2,4
    912c:	31c00015 	stw	r7,0(r6)
    9130:	003ff906 	br	9118 <alt_load+0x44>
    9134:	01000074 	movhi	r4,1
    9138:	01400074 	movhi	r5,1
    913c:	2124fb04 	addi	r4,r4,-27668
    9140:	2964fb04 	addi	r5,r5,-27668

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9144:	2140101e 	bne	r4,r5,9188 <alt_load+0xb4>
    9148:	00000b06 	br	9178 <alt_load+0xa4>
    914c:	00c00074 	movhi	r3,1
    9150:	18e06004 	addi	r3,r3,-32384
    9154:	1907c83a 	sub	r3,r3,r4
    9158:	0005883a 	mov	r2,zero
  {
    while( to != end )
    915c:	10fff526 	beq	r2,r3,9134 <alt_load+0x60>
    {
      *to++ = *from++;
    9160:	114f883a 	add	r7,r2,r5
    9164:	39c00017 	ldw	r7,0(r7)
    9168:	110d883a 	add	r6,r2,r4
    916c:	10800104 	addi	r2,r2,4
    9170:	31c00015 	stw	r7,0(r6)
    9174:	003ff906 	br	915c <alt_load+0x88>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9178:	00093680 	call	9368 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    917c:	dfc00017 	ldw	ra,0(sp)
    9180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    9184:	000936c1 	jmpi	936c <alt_icache_flush_all>
    9188:	00c00074 	movhi	r3,1
    918c:	18e56004 	addi	r3,r3,-27264
    9190:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    9194:	0005883a 	mov	r2,zero
  {
    while( to != end )
    9198:	18bff726 	beq	r3,r2,9178 <alt_load+0xa4>
    {
      *to++ = *from++;
    919c:	114f883a 	add	r7,r2,r5
    91a0:	39c00017 	ldw	r7,0(r7)
    91a4:	110d883a 	add	r6,r2,r4
    91a8:	10800104 	addi	r2,r2,4
    91ac:	31c00015 	stw	r7,0(r6)
    91b0:	003ff906 	br	9198 <alt_load+0xc4>

000091b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    91b4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    91b8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    91bc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    91c0:	00092880 	call	9288 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    91c4:	00092a80 	call	92a8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    91c8:	d1a05617 	ldw	r6,-32424(gp)
    91cc:	d1605717 	ldw	r5,-32420(gp)
    91d0:	d1205817 	ldw	r4,-32416(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    91d4:	dfc00017 	ldw	ra,0(sp)
    91d8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    91dc:	00082941 	jmpi	8294 <main>

000091e0 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    91e0:	defffe04 	addi	sp,sp,-8
    91e4:	dc000015 	stw	r16,0(sp)
    91e8:	dfc00115 	stw	ra,4(sp)
    91ec:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    91f0:	0008f340 	call	8f34 <strlen>
    91f4:	01000074 	movhi	r4,1
    91f8:	000f883a 	mov	r7,zero
    91fc:	100d883a 	mov	r6,r2
    9200:	800b883a 	mov	r5,r16
    9204:	21259f04 	addi	r4,r4,-27012
#else
    return fputs(str, stdout);
#endif
#endif
}
    9208:	dfc00117 	ldw	ra,4(sp)
    920c:	dc000017 	ldw	r16,0(sp)
    9210:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    9214:	00092ac1 	jmpi	92ac <altera_avalon_jtag_uart_write>

00009218 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    9218:	00092e01 	jmpi	92e0 <alt_busy_sleep>

0000921c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    921c:	00800044 	movi	r2,1
    9220:	20800226 	beq	r4,r2,922c <write+0x10>
    9224:	00800084 	movi	r2,2
    9228:	2080041e 	bne	r4,r2,923c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    922c:	01000074 	movhi	r4,1
    9230:	000f883a 	mov	r7,zero
    9234:	21259f04 	addi	r4,r4,-27012
    9238:	00092ac1 	jmpi	92ac <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    923c:	00800074 	movhi	r2,1
    9240:	10a5a004 	addi	r2,r2,-27008
    9244:	10800017 	ldw	r2,0(r2)
    9248:	10000926 	beq	r2,zero,9270 <write+0x54>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    924c:	deffff04 	addi	sp,sp,-4
    9250:	dfc00015 	stw	ra,0(sp)
    9254:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    9258:	00c01444 	movi	r3,81
    925c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    9260:	00bfffc4 	movi	r2,-1
    9264:	dfc00017 	ldw	ra,0(sp)
    9268:	dec00104 	addi	sp,sp,4
    926c:	f800283a 	ret
    9270:	00800074 	movhi	r2,1
    9274:	10a5ec04 	addi	r2,r2,-26704
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    9278:	00c01444 	movi	r3,81
    927c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    9280:	00bfffc4 	movi	r2,-1
    9284:	f800283a 	ret

00009288 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    9288:	deffff04 	addi	sp,sp,-4
    928c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    9290:	00093e40 	call	93e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    9294:	00800044 	movi	r2,1
    9298:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    929c:	dfc00017 	ldw	ra,0(sp)
    92a0:	dec00104 	addi	sp,sp,4
    92a4:	f800283a 	ret

000092a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92a8:	f800283a 	ret

000092ac <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    92ac:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    92b0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    92b4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    92b8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    92bc:	2980072e 	bgeu	r5,r6,92dc <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    92c0:	38c00037 	ldwio	r3,0(r7)
    92c4:	18ffffec 	andhi	r3,r3,65535
    92c8:	183ffc26 	beq	r3,zero,92bc <altera_avalon_jtag_uart_write+0x10>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    92cc:	28c00007 	ldb	r3,0(r5)
    92d0:	20c00035 	stwio	r3,0(r4)
    92d4:	29400044 	addi	r5,r5,1
    92d8:	003ff806 	br	92bc <altera_avalon_jtag_uart_write+0x10>

  return count;
}
    92dc:	f800283a 	ret

000092e0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92e0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    92e4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92e8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	dfc00115 	stw	ra,4(sp)
    92f4:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    92f8:	00085200 	call	8520 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    92fc:	10001026 	beq	r2,zero,9340 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9300:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9304:	013999b4 	movhi	r4,58982
    9308:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    930c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9310:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    9314:	297fffc4 	addi	r5,r5,-1
    9318:	283ffe1e 	bne	r5,zero,9314 <alt_busy_sleep+0x34>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    931c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    9320:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    9324:	18bffb16 	blt	r3,r2,9314 <alt_busy_sleep+0x34>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9328:	01400144 	movi	r5,5
    932c:	8009883a 	mov	r4,r16
    9330:	0008fa80 	call	8fa8 <__mulsi3>
    9334:	10bfffc4 	addi	r2,r2,-1
    9338:	103ffe1e 	bne	r2,zero,9334 <alt_busy_sleep+0x54>
    933c:	00000506 	br	9354 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9340:	01400144 	movi	r5,5
    9344:	8009883a 	mov	r4,r16
    9348:	0008fa80 	call	8fa8 <__mulsi3>
    934c:	10bfffc4 	addi	r2,r2,-1
    9350:	00bffe16 	blt	zero,r2,934c <alt_busy_sleep+0x6c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    9354:	0005883a 	mov	r2,zero
    9358:	dfc00117 	ldw	ra,4(sp)
    935c:	dc000017 	ldw	r16,0(sp)
    9360:	dec00204 	addi	sp,sp,8
    9364:	f800283a 	ret

00009368 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    9368:	f800283a 	ret

0000936c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    936c:	f800283a 	ret

00009370 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    9370:	213ffe84 	addi	r4,r4,-6
    9374:	008003c4 	movi	r2,15
    9378:	11001636 	bltu	r2,r4,93d4 <alt_exception_cause_generated_bad_addr+0x64>
    937c:	200890ba 	slli	r4,r4,2
    9380:	00800074 	movhi	r2,1
    9384:	10a4e504 	addi	r2,r2,-27756
    9388:	2089883a 	add	r4,r4,r2
    938c:	20800017 	ldw	r2,0(r4)
    9390:	1000683a 	jmp	r2
    9394:	000093dc 	xori	zero,zero,591
    9398:	000093dc 	xori	zero,zero,591
    939c:	000093d4 	movui	zero,591
    93a0:	000093d4 	movui	zero,591
    93a4:	000093d4 	movui	zero,591
    93a8:	000093dc 	xori	zero,zero,591
    93ac:	000093d4 	movui	zero,591
    93b0:	000093d4 	movui	zero,591
    93b4:	000093dc 	xori	zero,zero,591
    93b8:	000093dc 	xori	zero,zero,591
    93bc:	000093d4 	movui	zero,591
    93c0:	000093dc 	xori	zero,zero,591
    93c4:	000093d4 	movui	zero,591
    93c8:	000093d4 	movui	zero,591
    93cc:	000093d4 	movui	zero,591
    93d0:	000093dc 	xori	zero,zero,591
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    93d4:	0005883a 	mov	r2,zero
    93d8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    93dc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    93e0:	f800283a 	ret

000093e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    93e4:	000170fa 	wrctl	ienable,zero
    93e8:	f800283a 	ret
