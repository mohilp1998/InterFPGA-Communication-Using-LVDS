//
// Generated by Bluespec Compiler, version 2017.04.beta1 (build 35065, 2017-04-17)
//
// On Tue Jun 19 14:36:30 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_putFlit0_put               O     1 reg
// getFlit0_get                   O    32 reg
// RDY_getFlit0_get               O     1 reg
// deq_serial4_get                O    32 reg
// RDY_deq_serial4_get            O     1 reg
// RDY_enq_serial4_put            O     1
// CLK_clkinX4                    I     1 clock
// RST_N_rstinX4                  I     1 reset
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putFlit0_put                   I    32 reg
// enq_serial4_put                I    32
// EN_putFlit0_put                I     1
// EN_enq_serial4_put             I     1
// EN_getFlit0_get                I     1
// EN_deq_serial4_get             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_fpga1(CLK_clkinX4,
		   RST_N_rstinX4,
		   CLK,
		   RST_N,

		   putFlit0_put,
		   EN_putFlit0_put,
		   RDY_putFlit0_put,

		   EN_getFlit0_get,
		   getFlit0_get,
		   RDY_getFlit0_get,

		   EN_deq_serial4_get,
		   deq_serial4_get,
		   RDY_deq_serial4_get,

		   enq_serial4_put,
		   EN_enq_serial4_put,
		   RDY_enq_serial4_put);
  input  CLK_clkinX4;
  input  RST_N_rstinX4;
  input  CLK;
  input  RST_N;

  // action method putFlit0_put
  input  [31 : 0] putFlit0_put;
  input  EN_putFlit0_put;
  output RDY_putFlit0_put;

  // actionvalue method getFlit0_get
  input  EN_getFlit0_get;
  output [31 : 0] getFlit0_get;
  output RDY_getFlit0_get;

  // actionvalue method deq_serial4_get
  input  EN_deq_serial4_get;
  output [31 : 0] deq_serial4_get;
  output RDY_deq_serial4_get;

  // action method enq_serial4_put
  input  [31 : 0] enq_serial4_put;
  input  EN_enq_serial4_put;
  output RDY_enq_serial4_put;

  // signals for module outputs
  wire [31 : 0] deq_serial4_get, getFlit0_get;
  wire RDY_deq_serial4_get,
       RDY_enq_serial4_put,
       RDY_getFlit0_get,
       RDY_putFlit0_put;

  // ports of submodule flitsr_port_in_0_f
  wire [31 : 0] flitsr_port_in_0_f$D_IN, flitsr_port_in_0_f$D_OUT;
  wire flitsr_port_in_0_f$CLR,
       flitsr_port_in_0_f$DEQ,
       flitsr_port_in_0_f$EMPTY_N,
       flitsr_port_in_0_f$ENQ,
       flitsr_port_in_0_f$FULL_N;

  // ports of submodule flitsr_port_out_0_f
  wire [31 : 0] flitsr_port_out_0_f$D_IN, flitsr_port_out_0_f$D_OUT;
  wire flitsr_port_out_0_f$CLR,
       flitsr_port_out_0_f$DEQ,
       flitsr_port_out_0_f$EMPTY_N,
       flitsr_port_out_0_f$ENQ,
       flitsr_port_out_0_f$FULL_N;

  // ports of submodule noc
  wire [31 : 0] noc$recv_ports_0_getFlit,
		noc$recv_ports_1_getFlit,
		noc$recv_ports_4_getFlit,
		noc$send_ports_0_putFlit_flit_in,
		noc$send_ports_1_putFlit_flit_in,
		noc$send_ports_2_putFlit_flit_in,
		noc$send_ports_3_putFlit_flit_in,
		noc$send_ports_4_putFlit_flit_in,
		noc$send_ports_5_putFlit_flit_in,
		noc$send_ports_6_putFlit_flit_in,
		noc$send_ports_7_putFlit_flit_in,
		noc$send_ports_8_putFlit_flit_in;
  wire [1 : 0] noc$recv_ports_0_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_1_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_2_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_3_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_4_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_5_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_6_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_7_putNonFullVCs_nonFullVCs,
	       noc$recv_ports_8_putNonFullVCs_nonFullVCs,
	       noc$send_ports_0_getNonFullVCs,
	       noc$send_ports_1_getNonFullVCs,
	       noc$send_ports_4_getNonFullVCs;
  wire noc$EN_recv_ports_0_getFlit,
       noc$EN_recv_ports_0_putNonFullVCs,
       noc$EN_recv_ports_1_getFlit,
       noc$EN_recv_ports_1_putNonFullVCs,
       noc$EN_recv_ports_2_getFlit,
       noc$EN_recv_ports_2_putNonFullVCs,
       noc$EN_recv_ports_3_getFlit,
       noc$EN_recv_ports_3_putNonFullVCs,
       noc$EN_recv_ports_4_getFlit,
       noc$EN_recv_ports_4_putNonFullVCs,
       noc$EN_recv_ports_5_getFlit,
       noc$EN_recv_ports_5_putNonFullVCs,
       noc$EN_recv_ports_6_getFlit,
       noc$EN_recv_ports_6_putNonFullVCs,
       noc$EN_recv_ports_7_getFlit,
       noc$EN_recv_ports_7_putNonFullVCs,
       noc$EN_recv_ports_8_getFlit,
       noc$EN_recv_ports_8_putNonFullVCs,
       noc$EN_send_ports_0_getNonFullVCs,
       noc$EN_send_ports_0_putFlit,
       noc$EN_send_ports_1_getNonFullVCs,
       noc$EN_send_ports_1_putFlit,
       noc$EN_send_ports_2_getNonFullVCs,
       noc$EN_send_ports_2_putFlit,
       noc$EN_send_ports_3_getNonFullVCs,
       noc$EN_send_ports_3_putFlit,
       noc$EN_send_ports_4_getNonFullVCs,
       noc$EN_send_ports_4_putFlit,
       noc$EN_send_ports_5_getNonFullVCs,
       noc$EN_send_ports_5_putFlit,
       noc$EN_send_ports_6_getNonFullVCs,
       noc$EN_send_ports_6_putFlit,
       noc$EN_send_ports_7_getNonFullVCs,
       noc$EN_send_ports_7_putFlit,
       noc$EN_send_ports_8_getNonFullVCs,
       noc$EN_send_ports_8_putFlit;

  // ports of submodule nodes_0
  wire [31 : 0] nodes_0$getFlit,
		nodes_0$getFlitSoft_get,
		nodes_0$putFlitSoft_put,
		nodes_0$setRecvFlit_flit;
  wire [3 : 0] nodes_0$setRecvPortID_portid;
  wire [1 : 0] nodes_0$getRecvVCMask, nodes_0$setNonFullVC_vcmask;
  wire nodes_0$EN_getFlit,
       nodes_0$EN_getFlitSoft_get,
       nodes_0$EN_putFlitSoft_put,
       nodes_0$EN_setNonFullVC,
       nodes_0$EN_setRecvFlit,
       nodes_0$EN_setRecvPortID,
       nodes_0$RDY_getFlit,
       nodes_0$RDY_getFlitSoft_get,
       nodes_0$RDY_getRecvVCMask,
       nodes_0$RDY_putFlitSoft_put;

  // ports of submodule nodes_1
  wire [31 : 0] nodes_1$getFlit,
		nodes_1$putFlitSoft_put,
		nodes_1$setRecvFlit_flit;
  wire [3 : 0] nodes_1$setRecvPortID_portid;
  wire [1 : 0] nodes_1$getRecvVCMask, nodes_1$setNonFullVC_vcmask;
  wire nodes_1$EN_getFlit,
       nodes_1$EN_getFlitSoft_get,
       nodes_1$EN_putFlitSoft_put,
       nodes_1$EN_setNonFullVC,
       nodes_1$EN_setRecvFlit,
       nodes_1$EN_setRecvPortID,
       nodes_1$RDY_getFlit,
       nodes_1$RDY_getRecvVCMask;

  // ports of submodule nodes_4
  wire [31 : 0] nodes_4$getFlit,
		nodes_4$getFlitSoft_get,
		nodes_4$putFlitSoft_put,
		nodes_4$setRecvFlit_flit;
  wire [3 : 0] nodes_4$setRecvPortID_portid;
  wire [1 : 0] nodes_4$getRecvVCMask, nodes_4$setNonFullVC_vcmask;
  wire nodes_4$EN_getFlit,
       nodes_4$EN_getFlitSoft_get,
       nodes_4$EN_putFlitSoft_put,
       nodes_4$EN_setNonFullVC,
       nodes_4$EN_setRecvFlit,
       nodes_4$EN_setRecvPortID,
       nodes_4$RDY_getFlit,
       nodes_4$RDY_getFlitSoft_get,
       nodes_4$RDY_getRecvVCMask,
       nodes_4$RDY_putFlitSoft_put;

  // ports of submodule xfpga4
  wire [31 : 0] xfpga4$deq_serial_get,
		xfpga4$enq_serial_put,
		xfpga4$rx_get,
		xfpga4$tx_put;
  wire xfpga4$EN_deq_serial_get,
       xfpga4$EN_enq_serial_put,
       xfpga4$EN_rx_get,
       xfpga4$EN_tx_put,
       xfpga4$RDY_deq_serial_get,
       xfpga4$RDY_enq_serial_put,
       xfpga4$RDY_rx_get,
       xfpga4$RDY_tx_put;

  // action method putFlit0_put
  assign RDY_putFlit0_put = flitsr_port_in_0_f$FULL_N ;

  // actionvalue method getFlit0_get
  assign getFlit0_get = flitsr_port_out_0_f$D_OUT ;
  assign RDY_getFlit0_get = flitsr_port_out_0_f$EMPTY_N ;

  // actionvalue method deq_serial4_get
  assign deq_serial4_get = xfpga4$deq_serial_get ;
  assign RDY_deq_serial4_get = xfpga4$RDY_deq_serial_get ;

  // action method enq_serial4_put
  assign RDY_enq_serial4_put = xfpga4$RDY_enq_serial_put ;

  // submodule flitsr_port_in_0_f
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd64),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) flitsr_port_in_0_f(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(flitsr_port_in_0_f$D_IN),
						  .ENQ(flitsr_port_in_0_f$ENQ),
						  .DEQ(flitsr_port_in_0_f$DEQ),
						  .CLR(flitsr_port_in_0_f$CLR),
						  .D_OUT(flitsr_port_in_0_f$D_OUT),
						  .FULL_N(flitsr_port_in_0_f$FULL_N),
						  .EMPTY_N(flitsr_port_in_0_f$EMPTY_N));

  // submodule flitsr_port_out_0_f
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd64),
	      .p3cntr_width(32'd6),
	      .guarded(32'd1)) flitsr_port_out_0_f(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(flitsr_port_out_0_f$D_IN),
						   .ENQ(flitsr_port_out_0_f$ENQ),
						   .DEQ(flitsr_port_out_0_f$DEQ),
						   .CLR(flitsr_port_out_0_f$CLR),
						   .D_OUT(flitsr_port_out_0_f$D_OUT),
						   .FULL_N(flitsr_port_out_0_f$FULL_N),
						   .EMPTY_N(flitsr_port_out_0_f$EMPTY_N));

  // submodule noc
  mkNetworkSimple noc(.CLK(CLK),
		      .RST_N(RST_N),
		      .recv_ports_0_putNonFullVCs_nonFullVCs(noc$recv_ports_0_putNonFullVCs_nonFullVCs),
		      .recv_ports_1_putNonFullVCs_nonFullVCs(noc$recv_ports_1_putNonFullVCs_nonFullVCs),
		      .recv_ports_2_putNonFullVCs_nonFullVCs(noc$recv_ports_2_putNonFullVCs_nonFullVCs),
		      .recv_ports_3_putNonFullVCs_nonFullVCs(noc$recv_ports_3_putNonFullVCs_nonFullVCs),
		      .recv_ports_4_putNonFullVCs_nonFullVCs(noc$recv_ports_4_putNonFullVCs_nonFullVCs),
		      .recv_ports_5_putNonFullVCs_nonFullVCs(noc$recv_ports_5_putNonFullVCs_nonFullVCs),
		      .recv_ports_6_putNonFullVCs_nonFullVCs(noc$recv_ports_6_putNonFullVCs_nonFullVCs),
		      .recv_ports_7_putNonFullVCs_nonFullVCs(noc$recv_ports_7_putNonFullVCs_nonFullVCs),
		      .recv_ports_8_putNonFullVCs_nonFullVCs(noc$recv_ports_8_putNonFullVCs_nonFullVCs),
		      .send_ports_0_putFlit_flit_in(noc$send_ports_0_putFlit_flit_in),
		      .send_ports_1_putFlit_flit_in(noc$send_ports_1_putFlit_flit_in),
		      .send_ports_2_putFlit_flit_in(noc$send_ports_2_putFlit_flit_in),
		      .send_ports_3_putFlit_flit_in(noc$send_ports_3_putFlit_flit_in),
		      .send_ports_4_putFlit_flit_in(noc$send_ports_4_putFlit_flit_in),
		      .send_ports_5_putFlit_flit_in(noc$send_ports_5_putFlit_flit_in),
		      .send_ports_6_putFlit_flit_in(noc$send_ports_6_putFlit_flit_in),
		      .send_ports_7_putFlit_flit_in(noc$send_ports_7_putFlit_flit_in),
		      .send_ports_8_putFlit_flit_in(noc$send_ports_8_putFlit_flit_in),
		      .EN_send_ports_0_putFlit(noc$EN_send_ports_0_putFlit),
		      .EN_send_ports_0_getNonFullVCs(noc$EN_send_ports_0_getNonFullVCs),
		      .EN_send_ports_1_putFlit(noc$EN_send_ports_1_putFlit),
		      .EN_send_ports_1_getNonFullVCs(noc$EN_send_ports_1_getNonFullVCs),
		      .EN_send_ports_2_putFlit(noc$EN_send_ports_2_putFlit),
		      .EN_send_ports_2_getNonFullVCs(noc$EN_send_ports_2_getNonFullVCs),
		      .EN_send_ports_3_putFlit(noc$EN_send_ports_3_putFlit),
		      .EN_send_ports_3_getNonFullVCs(noc$EN_send_ports_3_getNonFullVCs),
		      .EN_send_ports_4_putFlit(noc$EN_send_ports_4_putFlit),
		      .EN_send_ports_4_getNonFullVCs(noc$EN_send_ports_4_getNonFullVCs),
		      .EN_send_ports_5_putFlit(noc$EN_send_ports_5_putFlit),
		      .EN_send_ports_5_getNonFullVCs(noc$EN_send_ports_5_getNonFullVCs),
		      .EN_send_ports_6_putFlit(noc$EN_send_ports_6_putFlit),
		      .EN_send_ports_6_getNonFullVCs(noc$EN_send_ports_6_getNonFullVCs),
		      .EN_send_ports_7_putFlit(noc$EN_send_ports_7_putFlit),
		      .EN_send_ports_7_getNonFullVCs(noc$EN_send_ports_7_getNonFullVCs),
		      .EN_send_ports_8_putFlit(noc$EN_send_ports_8_putFlit),
		      .EN_send_ports_8_getNonFullVCs(noc$EN_send_ports_8_getNonFullVCs),
		      .EN_recv_ports_0_getFlit(noc$EN_recv_ports_0_getFlit),
		      .EN_recv_ports_0_putNonFullVCs(noc$EN_recv_ports_0_putNonFullVCs),
		      .EN_recv_ports_1_getFlit(noc$EN_recv_ports_1_getFlit),
		      .EN_recv_ports_1_putNonFullVCs(noc$EN_recv_ports_1_putNonFullVCs),
		      .EN_recv_ports_2_getFlit(noc$EN_recv_ports_2_getFlit),
		      .EN_recv_ports_2_putNonFullVCs(noc$EN_recv_ports_2_putNonFullVCs),
		      .EN_recv_ports_3_getFlit(noc$EN_recv_ports_3_getFlit),
		      .EN_recv_ports_3_putNonFullVCs(noc$EN_recv_ports_3_putNonFullVCs),
		      .EN_recv_ports_4_getFlit(noc$EN_recv_ports_4_getFlit),
		      .EN_recv_ports_4_putNonFullVCs(noc$EN_recv_ports_4_putNonFullVCs),
		      .EN_recv_ports_5_getFlit(noc$EN_recv_ports_5_getFlit),
		      .EN_recv_ports_5_putNonFullVCs(noc$EN_recv_ports_5_putNonFullVCs),
		      .EN_recv_ports_6_getFlit(noc$EN_recv_ports_6_getFlit),
		      .EN_recv_ports_6_putNonFullVCs(noc$EN_recv_ports_6_putNonFullVCs),
		      .EN_recv_ports_7_getFlit(noc$EN_recv_ports_7_getFlit),
		      .EN_recv_ports_7_putNonFullVCs(noc$EN_recv_ports_7_putNonFullVCs),
		      .EN_recv_ports_8_getFlit(noc$EN_recv_ports_8_getFlit),
		      .EN_recv_ports_8_putNonFullVCs(noc$EN_recv_ports_8_putNonFullVCs),
		      .send_ports_0_getNonFullVCs(noc$send_ports_0_getNonFullVCs),
		      .send_ports_1_getNonFullVCs(noc$send_ports_1_getNonFullVCs),
		      .send_ports_2_getNonFullVCs(),
		      .send_ports_3_getNonFullVCs(),
		      .send_ports_4_getNonFullVCs(noc$send_ports_4_getNonFullVCs),
		      .send_ports_5_getNonFullVCs(),
		      .send_ports_6_getNonFullVCs(),
		      .send_ports_7_getNonFullVCs(),
		      .send_ports_8_getNonFullVCs(),
		      .recv_ports_0_getFlit(noc$recv_ports_0_getFlit),
		      .recv_ports_1_getFlit(noc$recv_ports_1_getFlit),
		      .recv_ports_2_getFlit(),
		      .recv_ports_3_getFlit(),
		      .recv_ports_4_getFlit(noc$recv_ports_4_getFlit),
		      .recv_ports_5_getFlit(),
		      .recv_ports_6_getFlit(),
		      .recv_ports_7_getFlit(),
		      .recv_ports_8_getFlit(),
		      .recv_ports_info_0_getRecvPortID(),
		      .recv_ports_info_1_getRecvPortID(),
		      .recv_ports_info_2_getRecvPortID(),
		      .recv_ports_info_3_getRecvPortID(),
		      .recv_ports_info_4_getRecvPortID(),
		      .recv_ports_info_5_getRecvPortID(),
		      .recv_ports_info_6_getRecvPortID(),
		      .recv_ports_info_7_getRecvPortID(),
		      .recv_ports_info_8_getRecvPortID());

  // submodule nodes_0
  mkNodeTask_host #(.portid(4'd0)) nodes_0(.CLK(CLK),
					   .RST_N(RST_N),
					   .putFlitSoft_put(nodes_0$putFlitSoft_put),
					   .setNonFullVC_vcmask(nodes_0$setNonFullVC_vcmask),
					   .setRecvFlit_flit(nodes_0$setRecvFlit_flit),
					   .setRecvPortID_portid(nodes_0$setRecvPortID_portid),
					   .EN_getFlit(nodes_0$EN_getFlit),
					   .EN_setNonFullVC(nodes_0$EN_setNonFullVC),
					   .EN_setRecvFlit(nodes_0$EN_setRecvFlit),
					   .EN_setRecvPortID(nodes_0$EN_setRecvPortID),
					   .EN_putFlitSoft_put(nodes_0$EN_putFlitSoft_put),
					   .EN_getFlitSoft_get(nodes_0$EN_getFlitSoft_get),
					   .getFlit(nodes_0$getFlit),
					   .RDY_getFlit(nodes_0$RDY_getFlit),
					   .RDY_setNonFullVC(),
					   .RDY_setRecvFlit(),
					   .getRecvVCMask(nodes_0$getRecvVCMask),
					   .RDY_getRecvVCMask(nodes_0$RDY_getRecvVCMask),
					   .RDY_setRecvPortID(),
					   .RDY_putFlitSoft_put(nodes_0$RDY_putFlitSoft_put),
					   .getFlitSoft_get(nodes_0$getFlitSoft_get),
					   .RDY_getFlitSoft_get(nodes_0$RDY_getFlitSoft_get));

  // submodule nodes_1
  mkNodeTask_echo1 #(.portid(4'd1)) nodes_1(.CLK(CLK),
					    .RST_N(RST_N),
					    .putFlitSoft_put(nodes_1$putFlitSoft_put),
					    .setNonFullVC_vcmask(nodes_1$setNonFullVC_vcmask),
					    .setRecvFlit_flit(nodes_1$setRecvFlit_flit),
					    .setRecvPortID_portid(nodes_1$setRecvPortID_portid),
					    .EN_getFlit(nodes_1$EN_getFlit),
					    .EN_setNonFullVC(nodes_1$EN_setNonFullVC),
					    .EN_setRecvFlit(nodes_1$EN_setRecvFlit),
					    .EN_setRecvPortID(nodes_1$EN_setRecvPortID),
					    .EN_putFlitSoft_put(nodes_1$EN_putFlitSoft_put),
					    .EN_getFlitSoft_get(nodes_1$EN_getFlitSoft_get),
					    .getFlit(nodes_1$getFlit),
					    .RDY_getFlit(nodes_1$RDY_getFlit),
					    .RDY_setNonFullVC(),
					    .RDY_setRecvFlit(),
					    .getRecvVCMask(nodes_1$getRecvVCMask),
					    .RDY_getRecvVCMask(nodes_1$RDY_getRecvVCMask),
					    .RDY_setRecvPortID(),
					    .RDY_putFlitSoft_put(),
					    .getFlitSoft_get(),
					    .RDY_getFlitSoft_get());

  // submodule nodes_4
  mkNodeTask_fpga1_4 #(.portid(4'd4)) nodes_4(.CLK(CLK),
					      .RST_N(RST_N),
					      .putFlitSoft_put(nodes_4$putFlitSoft_put),
					      .setNonFullVC_vcmask(nodes_4$setNonFullVC_vcmask),
					      .setRecvFlit_flit(nodes_4$setRecvFlit_flit),
					      .setRecvPortID_portid(nodes_4$setRecvPortID_portid),
					      .EN_getFlit(nodes_4$EN_getFlit),
					      .EN_setNonFullVC(nodes_4$EN_setNonFullVC),
					      .EN_setRecvFlit(nodes_4$EN_setRecvFlit),
					      .EN_setRecvPortID(nodes_4$EN_setRecvPortID),
					      .EN_putFlitSoft_put(nodes_4$EN_putFlitSoft_put),
					      .EN_getFlitSoft_get(nodes_4$EN_getFlitSoft_get),
					      .getFlit(nodes_4$getFlit),
					      .RDY_getFlit(nodes_4$RDY_getFlit),
					      .RDY_setNonFullVC(),
					      .RDY_setRecvFlit(),
					      .getRecvVCMask(nodes_4$getRecvVCMask),
					      .RDY_getRecvVCMask(nodes_4$RDY_getRecvVCMask),
					      .RDY_setRecvPortID(),
					      .RDY_putFlitSoft_put(nodes_4$RDY_putFlitSoft_put),
					      .getFlitSoft_get(nodes_4$getFlitSoft_get),
					      .RDY_getFlitSoft_get(nodes_4$RDY_getFlitSoft_get));

  // submodule xfpga4
  mkInterFPGA_LVDS xfpga4(.instnum(3'd4),
			  .CLK_clkinB(CLK_clkinX4),
			  .RST_N_reset_B(RST_N_rstinX4),
			  .CLK_clkinA(CLK),
			  .reset_A(RST_N),
			  .enq_serial_put(xfpga4$enq_serial_put),
			  .tx_put(xfpga4$tx_put),
			  .EN_tx_put(xfpga4$EN_tx_put),
			  .EN_rx_get(xfpga4$EN_rx_get),
			  .EN_deq_serial_get(xfpga4$EN_deq_serial_get),
			  .EN_enq_serial_put(xfpga4$EN_enq_serial_put),
			  .RDY_tx_put(xfpga4$RDY_tx_put),
			  .rx_get(xfpga4$rx_get),
			  .RDY_rx_get(xfpga4$RDY_rx_get),
			  .deq_serial_get(xfpga4$deq_serial_get),
			  .RDY_deq_serial_get(xfpga4$RDY_deq_serial_get),
			  .RDY_enq_serial_put(xfpga4$RDY_enq_serial_put));

  // submodule flitsr_port_in_0_f
  assign flitsr_port_in_0_f$D_IN = putFlit0_put ;
  assign flitsr_port_in_0_f$ENQ = EN_putFlit0_put ;
  assign flitsr_port_in_0_f$DEQ =
	     nodes_0$RDY_putFlitSoft_put && flitsr_port_in_0_f$EMPTY_N ;
  assign flitsr_port_in_0_f$CLR = 1'b0 ;

  // submodule flitsr_port_out_0_f
  assign flitsr_port_out_0_f$D_IN = nodes_0$getFlitSoft_get ;
  assign flitsr_port_out_0_f$ENQ =
	     nodes_0$RDY_getFlitSoft_get && flitsr_port_out_0_f$FULL_N ;
  assign flitsr_port_out_0_f$DEQ = EN_getFlit0_get ;
  assign flitsr_port_out_0_f$CLR = 1'b0 ;

  // submodule noc
  assign noc$recv_ports_0_putNonFullVCs_nonFullVCs = nodes_0$getRecvVCMask ;
  assign noc$recv_ports_1_putNonFullVCs_nonFullVCs = nodes_1$getRecvVCMask ;
  assign noc$recv_ports_2_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$recv_ports_3_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$recv_ports_4_putNonFullVCs_nonFullVCs = nodes_4$getRecvVCMask ;
  assign noc$recv_ports_5_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$recv_ports_6_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$recv_ports_7_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$recv_ports_8_putNonFullVCs_nonFullVCs = 2'h0 ;
  assign noc$send_ports_0_putFlit_flit_in = nodes_0$getFlit ;
  assign noc$send_ports_1_putFlit_flit_in = nodes_1$getFlit ;
  assign noc$send_ports_2_putFlit_flit_in = 32'h0 ;
  assign noc$send_ports_3_putFlit_flit_in = 32'h0 ;
  assign noc$send_ports_4_putFlit_flit_in = nodes_4$getFlit ;
  assign noc$send_ports_5_putFlit_flit_in = 32'h0 ;
  assign noc$send_ports_6_putFlit_flit_in = 32'h0 ;
  assign noc$send_ports_7_putFlit_flit_in = 32'h0 ;
  assign noc$send_ports_8_putFlit_flit_in = 32'h0 ;
  assign noc$EN_send_ports_0_putFlit = nodes_0$RDY_getFlit ;
  assign noc$EN_send_ports_0_getNonFullVCs = 1'd1 ;
  assign noc$EN_send_ports_1_putFlit = nodes_1$RDY_getFlit ;
  assign noc$EN_send_ports_1_getNonFullVCs = 1'd1 ;
  assign noc$EN_send_ports_2_putFlit = 1'b0 ;
  assign noc$EN_send_ports_2_getNonFullVCs = 1'b0 ;
  assign noc$EN_send_ports_3_putFlit = 1'b0 ;
  assign noc$EN_send_ports_3_getNonFullVCs = 1'b0 ;
  assign noc$EN_send_ports_4_putFlit = nodes_4$RDY_getFlit ;
  assign noc$EN_send_ports_4_getNonFullVCs = 1'd1 ;
  assign noc$EN_send_ports_5_putFlit = 1'b0 ;
  assign noc$EN_send_ports_5_getNonFullVCs = 1'b0 ;
  assign noc$EN_send_ports_6_putFlit = 1'b0 ;
  assign noc$EN_send_ports_6_getNonFullVCs = 1'b0 ;
  assign noc$EN_send_ports_7_putFlit = 1'b0 ;
  assign noc$EN_send_ports_7_getNonFullVCs = 1'b0 ;
  assign noc$EN_send_ports_8_putFlit = 1'b0 ;
  assign noc$EN_send_ports_8_getNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_0_getFlit = 1'd1 ;
  assign noc$EN_recv_ports_0_putNonFullVCs = nodes_0$RDY_getRecvVCMask ;
  assign noc$EN_recv_ports_1_getFlit = 1'd1 ;
  assign noc$EN_recv_ports_1_putNonFullVCs = nodes_1$RDY_getRecvVCMask ;
  assign noc$EN_recv_ports_2_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_2_putNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_3_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_3_putNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_4_getFlit = 1'd1 ;
  assign noc$EN_recv_ports_4_putNonFullVCs = nodes_4$RDY_getRecvVCMask ;
  assign noc$EN_recv_ports_5_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_5_putNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_6_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_6_putNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_7_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_7_putNonFullVCs = 1'b0 ;
  assign noc$EN_recv_ports_8_getFlit = 1'b0 ;
  assign noc$EN_recv_ports_8_putNonFullVCs = 1'b0 ;

  // submodule nodes_0
  assign nodes_0$putFlitSoft_put = flitsr_port_in_0_f$D_OUT ;
  assign nodes_0$setNonFullVC_vcmask = noc$send_ports_0_getNonFullVCs ;
  assign nodes_0$setRecvFlit_flit = noc$recv_ports_0_getFlit ;
  assign nodes_0$setRecvPortID_portid = 4'h0 ;
  assign nodes_0$EN_getFlit = nodes_0$RDY_getFlit ;
  assign nodes_0$EN_setNonFullVC = 1'd1 ;
  assign nodes_0$EN_setRecvFlit = 1'd1 ;
  assign nodes_0$EN_setRecvPortID = 1'b0 ;
  assign nodes_0$EN_putFlitSoft_put =
	     nodes_0$RDY_putFlitSoft_put && flitsr_port_in_0_f$EMPTY_N ;
  assign nodes_0$EN_getFlitSoft_get =
	     nodes_0$RDY_getFlitSoft_get && flitsr_port_out_0_f$FULL_N ;

  // submodule nodes_1
  assign nodes_1$putFlitSoft_put = 32'h0 ;
  assign nodes_1$setNonFullVC_vcmask = noc$send_ports_1_getNonFullVCs ;
  assign nodes_1$setRecvFlit_flit = noc$recv_ports_1_getFlit ;
  assign nodes_1$setRecvPortID_portid = 4'h0 ;
  assign nodes_1$EN_getFlit = nodes_1$RDY_getFlit ;
  assign nodes_1$EN_setNonFullVC = 1'd1 ;
  assign nodes_1$EN_setRecvFlit = 1'd1 ;
  assign nodes_1$EN_setRecvPortID = 1'b0 ;
  assign nodes_1$EN_putFlitSoft_put = 1'b0 ;
  assign nodes_1$EN_getFlitSoft_get = 1'b0 ;

  // submodule nodes_4
  assign nodes_4$putFlitSoft_put = xfpga4$rx_get ;
  assign nodes_4$setNonFullVC_vcmask = noc$send_ports_4_getNonFullVCs ;
  assign nodes_4$setRecvFlit_flit = noc$recv_ports_4_getFlit ;
  assign nodes_4$setRecvPortID_portid = 4'h0 ;
  assign nodes_4$EN_getFlit = nodes_4$RDY_getFlit ;
  assign nodes_4$EN_setNonFullVC = 1'd1 ;
  assign nodes_4$EN_setRecvFlit = 1'd1 ;
  assign nodes_4$EN_setRecvPortID = 1'b0 ;
  assign nodes_4$EN_putFlitSoft_put =
	     xfpga4$RDY_rx_get && nodes_4$RDY_putFlitSoft_put ;
  assign nodes_4$EN_getFlitSoft_get =
	     xfpga4$RDY_tx_put && nodes_4$RDY_getFlitSoft_get ;

  // submodule xfpga4
  assign xfpga4$enq_serial_put = enq_serial4_put ;
  assign xfpga4$tx_put = nodes_4$getFlitSoft_get ;
  assign xfpga4$EN_tx_put = xfpga4$RDY_tx_put && nodes_4$RDY_getFlitSoft_get ;
  assign xfpga4$EN_rx_get = xfpga4$RDY_rx_get && nodes_4$RDY_putFlitSoft_put ;
  assign xfpga4$EN_deq_serial_get = EN_deq_serial4_get ;
  assign xfpga4$EN_enq_serial_put = EN_enq_serial4_put ;
endmodule  // mkTop_fpga1

