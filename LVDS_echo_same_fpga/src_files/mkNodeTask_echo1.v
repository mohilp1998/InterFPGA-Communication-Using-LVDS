//
// Generated by Bluespec Compiler, version 2017.04.beta1 (build 35065, 2017-04-17)
//
// On Mon Jun 18 16:53:09 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// getFlit                        O    32 reg
// RDY_getFlit                    O     1
// RDY_setNonFullVC               O     1 const
// RDY_setRecvFlit                O     1 const
// getRecvVCMask                  O     2
// RDY_getRecvVCMask              O     1 const
// RDY_setRecvPortID              O     1 const
// RDY_putFlitSoft_put            O     1 reg
// getFlitSoft_get                O    32 reg
// RDY_getFlitSoft_get            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setNonFullVC_vcmask            I     2
// setRecvFlit_flit               I    32
// setRecvPortID_portid           I     4 reg
// putFlitSoft_put                I    32
// EN_setNonFullVC                I     1
// EN_setRecvFlit                 I     1
// EN_setRecvPortID               I     1
// EN_putFlitSoft_put             I     1
// EN_getFlit                     I     1
// EN_getFlitSoft_get             I     1
//
// Combinational paths from inputs to outputs:
//   (setNonFullVC_vcmask, EN_setNonFullVC) -> RDY_getFlit
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkNodeTask_echo1(CLK,
			RST_N,

			EN_getFlit,
			getFlit,
			RDY_getFlit,

			setNonFullVC_vcmask,
			EN_setNonFullVC,
			RDY_setNonFullVC,

			setRecvFlit_flit,
			EN_setRecvFlit,
			RDY_setRecvFlit,

			getRecvVCMask,
			RDY_getRecvVCMask,

			setRecvPortID_portid,
			EN_setRecvPortID,
			RDY_setRecvPortID,

			putFlitSoft_put,
			EN_putFlitSoft_put,
			RDY_putFlitSoft_put,

			EN_getFlitSoft_get,
			getFlitSoft_get,
			RDY_getFlitSoft_get);
  parameter [3 : 0] portid = 4'b0;
  input  CLK;
  input  RST_N;

  // actionvalue method getFlit
  input  EN_getFlit;
  output [31 : 0] getFlit;
  output RDY_getFlit;

  // action method setNonFullVC
  input  [1 : 0] setNonFullVC_vcmask;
  input  EN_setNonFullVC;
  output RDY_setNonFullVC;

  // action method setRecvFlit
  input  [31 : 0] setRecvFlit_flit;
  input  EN_setRecvFlit;
  output RDY_setRecvFlit;

  // value method getRecvVCMask
  output [1 : 0] getRecvVCMask;
  output RDY_getRecvVCMask;

  // action method setRecvPortID
  input  [3 : 0] setRecvPortID_portid;
  input  EN_setRecvPortID;
  output RDY_setRecvPortID;

  // action method putFlitSoft_put
  input  [31 : 0] putFlitSoft_put;
  input  EN_putFlitSoft_put;
  output RDY_putFlitSoft_put;

  // actionvalue method getFlitSoft_get
  input  EN_getFlitSoft_get;
  output [31 : 0] getFlitSoft_get;
  output RDY_getFlitSoft_get;

  // signals for module outputs
  wire [31 : 0] getFlit, getFlitSoft_get;
  wire [1 : 0] getRecvVCMask;
  wire RDY_getFlit,
       RDY_getFlitSoft_get,
       RDY_getRecvVCMask,
       RDY_putFlitSoft_put,
       RDY_setNonFullVC,
       RDY_setRecvFlit,
       RDY_setRecvPortID;

  // inlined wires
  wire [32 : 0] splf_c2nw_m_firstValue$wget;
  wire [3 : 0] splf_c2nw_m_firstIndex$wget;
  wire core_start_wire$whas,
       core_state_set_pw$whas,
       splf_c2nw_m_firstIsLastInDataQ$whas,
       splf_c2nw_m_firstValue$whas;

  // register core_dtlogger_cticks
  reg [31 : 0] core_dtlogger_cticks;
  wire [31 : 0] core_dtlogger_cticks$D_IN;
  wire core_dtlogger_cticks$EN;

  // register core_dtlogger_dlog
  reg [31 : 0] core_dtlogger_dlog;
  wire [31 : 0] core_dtlogger_dlog$D_IN;
  wire core_dtlogger_dlog$EN;

  // register core_dtlogger_initialized
  reg core_dtlogger_initialized;
  wire core_dtlogger_initialized$D_IN, core_dtlogger_initialized$EN;

  // register core_dtlogger_tlog
  reg [31 : 0] core_dtlogger_tlog;
  wire [31 : 0] core_dtlogger_tlog$D_IN;
  wire core_dtlogger_tlog$EN;

  // register core_mergeF_m_notDeqPort
  reg core_mergeF_m_notDeqPort;
  wire core_mergeF_m_notDeqPort$D_IN, core_mergeF_m_notDeqPort$EN;

  // register core_running
  reg core_running;
  wire core_running$D_IN, core_running$EN;

  // register core_saved_source_address
  reg [3 : 0] core_saved_source_address;
  wire [3 : 0] core_saved_source_address$D_IN;
  wire core_saved_source_address$EN;

  // register core_start_reg
  reg core_start_reg;
  wire core_start_reg$D_IN, core_start_reg$EN;

  // register core_start_reg_1
  reg core_start_reg_1;
  wire core_start_reg_1$D_IN, core_start_reg_1$EN;

  // register core_state_can_overlap
  reg core_state_can_overlap;
  wire core_state_can_overlap$D_IN, core_state_can_overlap$EN;

  // register core_state_fired
  reg core_state_fired;
  wire core_state_fired$D_IN, core_state_fired$EN;

  // register core_state_mkFSMstate
  reg [3 : 0] core_state_mkFSMstate;
  reg [3 : 0] core_state_mkFSMstate$D_IN;
  wire core_state_mkFSMstate$EN;

  // register core_task_info
  reg [7 : 0] core_task_info;
  wire [7 : 0] core_task_info$D_IN;
  wire core_task_info$EN;

  // register core_x
  reg [24 : 0] core_x;
  wire [24 : 0] core_x$D_IN;
  wire core_x$EN;

  // register fromCore_dstaddr
  reg [3 : 0] fromCore_dstaddr;
  wire [3 : 0] fromCore_dstaddr$D_IN;
  wire fromCore_dstaddr$EN;

  // register fromCore_dtlogger_cticks
  reg [31 : 0] fromCore_dtlogger_cticks;
  wire [31 : 0] fromCore_dtlogger_cticks$D_IN;
  wire fromCore_dtlogger_cticks$EN;

  // register fromCore_dtlogger_dlog
  reg [31 : 0] fromCore_dtlogger_dlog;
  wire [31 : 0] fromCore_dtlogger_dlog$D_IN;
  wire fromCore_dtlogger_dlog$EN;

  // register fromCore_dtlogger_initialized
  reg fromCore_dtlogger_initialized;
  wire fromCore_dtlogger_initialized$D_IN, fromCore_dtlogger_initialized$EN;

  // register fromCore_dtlogger_tlog
  reg [31 : 0] fromCore_dtlogger_tlog;
  wire [31 : 0] fromCore_dtlogger_tlog$D_IN;
  wire fromCore_dtlogger_tlog$EN;

  // register fromCore_f_idx
  reg [15 : 0] fromCore_f_idx;
  wire [15 : 0] fromCore_f_idx$D_IN;
  wire fromCore_f_idx$EN;

  // register fromCore_flits2send
  reg [15 : 0] fromCore_flits2send;
  wire [15 : 0] fromCore_flits2send$D_IN;
  wire fromCore_flits2send$EN;

  // register fromCore_outvc
  reg fromCore_outvc;
  wire fromCore_outvc$D_IN, fromCore_outvc$EN;

  // register fromCore_vflits_0
  reg [24 : 0] fromCore_vflits_0;
  wire [24 : 0] fromCore_vflits_0$D_IN;
  wire fromCore_vflits_0$EN;

  // register fromCore_vflits_1
  reg [24 : 0] fromCore_vflits_1;
  wire [24 : 0] fromCore_vflits_1$D_IN;
  wire fromCore_vflits_1$EN;

  // register fromCore_vflits_10
  reg [24 : 0] fromCore_vflits_10;
  wire [24 : 0] fromCore_vflits_10$D_IN;
  wire fromCore_vflits_10$EN;

  // register fromCore_vflits_11
  reg [24 : 0] fromCore_vflits_11;
  wire [24 : 0] fromCore_vflits_11$D_IN;
  wire fromCore_vflits_11$EN;

  // register fromCore_vflits_12
  reg [24 : 0] fromCore_vflits_12;
  wire [24 : 0] fromCore_vflits_12$D_IN;
  wire fromCore_vflits_12$EN;

  // register fromCore_vflits_13
  reg [24 : 0] fromCore_vflits_13;
  wire [24 : 0] fromCore_vflits_13$D_IN;
  wire fromCore_vflits_13$EN;

  // register fromCore_vflits_14
  reg [24 : 0] fromCore_vflits_14;
  wire [24 : 0] fromCore_vflits_14$D_IN;
  wire fromCore_vflits_14$EN;

  // register fromCore_vflits_15
  reg [24 : 0] fromCore_vflits_15;
  wire [24 : 0] fromCore_vflits_15$D_IN;
  wire fromCore_vflits_15$EN;

  // register fromCore_vflits_16
  reg [24 : 0] fromCore_vflits_16;
  wire [24 : 0] fromCore_vflits_16$D_IN;
  wire fromCore_vflits_16$EN;

  // register fromCore_vflits_17
  reg [24 : 0] fromCore_vflits_17;
  wire [24 : 0] fromCore_vflits_17$D_IN;
  wire fromCore_vflits_17$EN;

  // register fromCore_vflits_18
  reg [24 : 0] fromCore_vflits_18;
  wire [24 : 0] fromCore_vflits_18$D_IN;
  wire fromCore_vflits_18$EN;

  // register fromCore_vflits_19
  reg [24 : 0] fromCore_vflits_19;
  wire [24 : 0] fromCore_vflits_19$D_IN;
  wire fromCore_vflits_19$EN;

  // register fromCore_vflits_2
  reg [24 : 0] fromCore_vflits_2;
  wire [24 : 0] fromCore_vflits_2$D_IN;
  wire fromCore_vflits_2$EN;

  // register fromCore_vflits_3
  reg [24 : 0] fromCore_vflits_3;
  wire [24 : 0] fromCore_vflits_3$D_IN;
  wire fromCore_vflits_3$EN;

  // register fromCore_vflits_4
  reg [24 : 0] fromCore_vflits_4;
  wire [24 : 0] fromCore_vflits_4$D_IN;
  wire fromCore_vflits_4$EN;

  // register fromCore_vflits_5
  reg [24 : 0] fromCore_vflits_5;
  wire [24 : 0] fromCore_vflits_5$D_IN;
  wire fromCore_vflits_5$EN;

  // register fromCore_vflits_6
  reg [24 : 0] fromCore_vflits_6;
  wire [24 : 0] fromCore_vflits_6$D_IN;
  wire fromCore_vflits_6$EN;

  // register fromCore_vflits_7
  reg [24 : 0] fromCore_vflits_7;
  wire [24 : 0] fromCore_vflits_7$D_IN;
  wire fromCore_vflits_7$EN;

  // register fromCore_vflits_8
  reg [24 : 0] fromCore_vflits_8;
  wire [24 : 0] fromCore_vflits_8$D_IN;
  wire fromCore_vflits_8$EN;

  // register fromCore_vflits_9
  reg [24 : 0] fromCore_vflits_9;
  wire [24 : 0] fromCore_vflits_9$D_IN;
  wire fromCore_vflits_9$EN;

  // register splf_c2nw_m_notDeqPort
  reg [4 : 0] splf_c2nw_m_notDeqPort;
  wire [4 : 0] splf_c2nw_m_notDeqPort$D_IN;
  wire splf_c2nw_m_notDeqPort$EN;

  // register toCore_dtlogger_cticks
  reg [31 : 0] toCore_dtlogger_cticks;
  wire [31 : 0] toCore_dtlogger_cticks$D_IN;
  wire toCore_dtlogger_cticks$EN;

  // register toCore_dtlogger_dlog
  reg [31 : 0] toCore_dtlogger_dlog;
  wire [31 : 0] toCore_dtlogger_dlog$D_IN;
  wire toCore_dtlogger_dlog$EN;

  // register toCore_dtlogger_initialized
  reg toCore_dtlogger_initialized;
  wire toCore_dtlogger_initialized$D_IN, toCore_dtlogger_initialized$EN;

  // register toCore_dtlogger_tlog
  reg [31 : 0] toCore_dtlogger_tlog;
  wire [31 : 0] toCore_dtlogger_tlog$D_IN;
  wire toCore_dtlogger_tlog$EN;

  // register toCore_fc_0
  reg [7 : 0] toCore_fc_0;
  wire [7 : 0] toCore_fc_0$D_IN;
  wire toCore_fc_0$EN;

  // register toCore_fc_1
  reg [7 : 0] toCore_fc_1;
  wire [7 : 0] toCore_fc_1$D_IN;
  wire toCore_fc_1$EN;

  // register toCore_staging_0
  reg [32 : 0] toCore_staging_0;
  wire [32 : 0] toCore_staging_0$D_IN;
  wire toCore_staging_0$EN;

  // register toCore_staging_1
  reg [32 : 0] toCore_staging_1;
  wire [32 : 0] toCore_staging_1$D_IN;
  wire toCore_staging_1$EN;

  // ports of submodule bridge
  wire [31 : 0] bridge$corePort_0_get,
		bridge$corePort_0_put_flit,
		bridge$corePort_1_get,
		bridge$corePort_1_put_flit,
		bridge$nocPort_getFlit,
		bridge$nocPort_getFlitSoft_get,
		bridge$nocPort_putFlitSoft_put,
		bridge$nocPort_setRecvFlit_flit;
  wire [3 : 0] bridge$nocPort_setRecvPortID_portid;
  wire [1 : 0] bridge$nocPort_getRecvVCMask,
	       bridge$nocPort_setNonFullVC_vcmask;
  wire bridge$EN_corePort_0_get,
       bridge$EN_corePort_0_put,
       bridge$EN_corePort_1_get,
       bridge$EN_corePort_1_put,
       bridge$EN_nocPort_getFlit,
       bridge$EN_nocPort_getFlitSoft_get,
       bridge$EN_nocPort_putFlitSoft_put,
       bridge$EN_nocPort_setNonFullVC,
       bridge$EN_nocPort_setRecvFlit,
       bridge$EN_nocPort_setRecvPortID,
       bridge$RDY_corePort_0_get,
       bridge$RDY_corePort_0_put,
       bridge$RDY_corePort_1_get,
       bridge$RDY_corePort_1_put,
       bridge$RDY_nocPort_getFlit,
       bridge$RDY_nocPort_getFlitSoft_get,
       bridge$RDY_nocPort_getRecvVCMask,
       bridge$RDY_nocPort_putFlitSoft_put;

  // ports of submodule core_mergeF_dataQ
  wire [33 : 0] core_mergeF_dataQ$D_IN;
  wire core_mergeF_dataQ$CLR, core_mergeF_dataQ$DEQ, core_mergeF_dataQ$ENQ;

  // ports of submodule fromCore_outFifo_0
  reg [31 : 0] fromCore_outFifo_0$D_IN;
  wire [31 : 0] fromCore_outFifo_0$D_OUT;
  wire fromCore_outFifo_0$CLR,
       fromCore_outFifo_0$DEQ,
       fromCore_outFifo_0$EMPTY_N,
       fromCore_outFifo_0$ENQ,
       fromCore_outFifo_0$FULL_N;

  // ports of submodule fromCore_outFifo_1
  reg [31 : 0] fromCore_outFifo_1$D_IN;
  wire [31 : 0] fromCore_outFifo_1$D_OUT;
  wire fromCore_outFifo_1$CLR,
       fromCore_outFifo_1$DEQ,
       fromCore_outFifo_1$EMPTY_N,
       fromCore_outFifo_1$ENQ,
       fromCore_outFifo_1$FULL_N;

  // ports of submodule pkt_c2nw
  wire [33 : 0] pkt_c2nw$D_IN, pkt_c2nw$D_OUT;
  wire pkt_c2nw$CLR,
       pkt_c2nw$DEQ,
       pkt_c2nw$EMPTY_N,
       pkt_c2nw$ENQ,
       pkt_c2nw$FULL_N;

  // ports of submodule pkt_nw2c_0
  wire [32 : 0] pkt_nw2c_0$D_IN, pkt_nw2c_0$D_OUT;
  wire pkt_nw2c_0$CLR,
       pkt_nw2c_0$DEQ,
       pkt_nw2c_0$EMPTY_N,
       pkt_nw2c_0$ENQ,
       pkt_nw2c_0$FULL_N;

  // ports of submodule splf_c2nw_dataQ
  wire [164 : 0] splf_c2nw_dataQ$D_IN, splf_c2nw_dataQ$D_OUT;
  wire splf_c2nw_dataQ$CLR,
       splf_c2nw_dataQ$DEQ,
       splf_c2nw_dataQ$EMPTY_N,
       splf_c2nw_dataQ$ENQ;

  // ports of submodule splf_nw2c_0
  wire [31 : 0] splf_nw2c_0$D_IN;
  wire splf_nw2c_0$CLR, splf_nw2c_0$DEQ, splf_nw2c_0$ENQ, splf_nw2c_0$FULL_N;

  // ports of submodule splf_nw2c_1
  wire [31 : 0] splf_nw2c_1$D_IN;
  wire splf_nw2c_1$CLR, splf_nw2c_1$DEQ, splf_nw2c_1$ENQ, splf_nw2c_1$FULL_N;

  // ports of submodule splf_nw2c_2
  wire [31 : 0] splf_nw2c_2$D_IN;
  wire splf_nw2c_2$CLR, splf_nw2c_2$DEQ, splf_nw2c_2$ENQ, splf_nw2c_2$FULL_N;

  // ports of submodule splf_nw2c_3
  wire [31 : 0] splf_nw2c_3$D_IN;
  wire splf_nw2c_3$CLR, splf_nw2c_3$DEQ, splf_nw2c_3$ENQ, splf_nw2c_3$FULL_N;

  // ports of submodule splf_nw2c_4
  wire [31 : 0] splf_nw2c_4$D_IN;
  wire splf_nw2c_4$CLR, splf_nw2c_4$DEQ, splf_nw2c_4$ENQ, splf_nw2c_4$FULL_N;

  // ports of submodule toCore_inFifo_0
  wire [31 : 0] toCore_inFifo_0$D_IN, toCore_inFifo_0$D_OUT;
  wire toCore_inFifo_0$CLR,
       toCore_inFifo_0$DEQ,
       toCore_inFifo_0$EMPTY_N,
       toCore_inFifo_0$ENQ,
       toCore_inFifo_0$FULL_N;

  // ports of submodule toCore_inFifo_1
  wire [31 : 0] toCore_inFifo_1$D_IN, toCore_inFifo_1$D_OUT;
  wire toCore_inFifo_1$CLR,
       toCore_inFifo_1$DEQ,
       toCore_inFifo_1$EMPTY_N,
       toCore_inFifo_1$ENQ,
       toCore_inFifo_1$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_mkConnectionAVtoAf,
       CAN_FIRE_RL_mkConnectionAVtoAf_1,
       WILL_FIRE_RL_core_fsm_start,
       WILL_FIRE_RL_fromCore_priority_spl,
       WILL_FIRE_RL_fromCore_r_first,
       WILL_FIRE_RL_fromCore_r_rest,
       WILL_FIRE_RL_toCore_pack,
       WILL_FIRE_RL_toCore_pack_1;

  // inputs to muxes for submodule ports
  wire [32 : 0] MUX_pkt_nw2c_0$enq_1__VAL_1, MUX_pkt_nw2c_0$enq_1__VAL_2;
  wire [31 : 0] MUX_fromCore_outFifo_0$enq_1__VAL_2,
		MUX_fromCore_outFifo_0$enq_1__VAL_3;
  wire [15 : 0] MUX_fromCore_flits2send$write_1__VAL_1;
  wire MUX_core_start_reg$write_1__SEL_2,
       MUX_core_state_mkFSMstate$write_1__SEL_2,
       MUX_core_state_mkFSMstate$write_1__SEL_3,
       MUX_core_state_mkFSMstate$write_1__SEL_4,
       MUX_core_state_mkFSMstate$write_1__SEL_5,
       MUX_core_state_mkFSMstate$write_1__SEL_6,
       MUX_core_state_mkFSMstate$write_1__SEL_7,
       MUX_core_state_mkFSMstate$write_1__SEL_8,
       MUX_core_state_mkFSMstate$write_1__SEL_9,
       MUX_fromCore_outFifo_0$enq_1__SEL_1,
       MUX_fromCore_outFifo_0$enq_1__SEL_2,
       MUX_fromCore_outFifo_0$enq_1__SEL_3,
       MUX_fromCore_outFifo_1$enq_1__SEL_1,
       MUX_fromCore_outFifo_1$enq_1__SEL_2,
       MUX_fromCore_outFifo_1$enq_1__SEL_3,
       MUX_pkt_nw2c_0$enq_1__SEL_1,
       MUX_splf_nw2c_0$enq_1__SEL_1,
       MUX_splf_nw2c_1$enq_1__SEL_1,
       MUX_splf_nw2c_2$enq_1__SEL_1,
       MUX_splf_nw2c_3$enq_1__SEL_1,
       MUX_splf_nw2c_4$enq_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395,
	       IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441,
	       TASK_fopen___d171,
	       TASK_fopen___d172,
	       TASK_fopen___d263,
	       TASK_fopen___d264,
	       TASK_fopen___d342,
	       TASK_fopen___d343;
  reg [24 : 0] CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2,
	       xdata__h39600;
  reg [3 : 0] CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1;
  reg CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3,
      x__h6618,
      x__h6659,
      x__h6681;
  wire [31 : 0] x__h39638;
  wire [29 : 0] SEL_ARR_splf_c2nw_dataQ_first__9_BITS_29_TO_26_ETC___d114;
  wire [15 : 0] x__h39536;
  wire [7 : 0] x__h41185, x__h44878;
  wire [3 : 0] splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41;
  wire NOT_splf_c2nw_dataQ_first__9_BIT_32_0_AND_NOT__ETC___d150,
       core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252,
       splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33,
       splf_c2nw_m_firstValue_whas__73_AND_splf_c2nw__ETC___d281,
       splf_nw2c_1_i_notFull__54_AND_splf_nw2c_2_i_no_ETC___d360;

  // actionvalue method getFlit
  assign getFlit = bridge$nocPort_getFlit ;
  assign RDY_getFlit = bridge$RDY_nocPort_getFlit ;

  // action method setNonFullVC
  assign RDY_setNonFullVC = 1'd1 ;

  // action method setRecvFlit
  assign RDY_setRecvFlit = 1'd1 ;

  // value method getRecvVCMask
  assign getRecvVCMask = bridge$nocPort_getRecvVCMask ;
  assign RDY_getRecvVCMask = bridge$RDY_nocPort_getRecvVCMask ;

  // action method setRecvPortID
  assign RDY_setRecvPortID = 1'd1 ;

  // action method putFlitSoft_put
  assign RDY_putFlitSoft_put = bridge$RDY_nocPort_putFlitSoft_put ;

  // actionvalue method getFlitSoft_get
  assign getFlitSoft_get = bridge$nocPort_getFlitSoft_get ;
  assign RDY_getFlitSoft_get = bridge$RDY_nocPort_getFlitSoft_get ;

  // submodule bridge
  mkCnctBridge #(.port_id(portid)) bridge(.CLK(CLK),
					  .RST_N(RST_N),
					  .corePort_0_put_flit(bridge$corePort_0_put_flit),
					  .corePort_1_put_flit(bridge$corePort_1_put_flit),
					  .nocPort_putFlitSoft_put(bridge$nocPort_putFlitSoft_put),
					  .nocPort_setNonFullVC_vcmask(bridge$nocPort_setNonFullVC_vcmask),
					  .nocPort_setRecvFlit_flit(bridge$nocPort_setRecvFlit_flit),
					  .nocPort_setRecvPortID_portid(bridge$nocPort_setRecvPortID_portid),
					  .EN_nocPort_getFlit(bridge$EN_nocPort_getFlit),
					  .EN_nocPort_setNonFullVC(bridge$EN_nocPort_setNonFullVC),
					  .EN_nocPort_setRecvFlit(bridge$EN_nocPort_setRecvFlit),
					  .EN_nocPort_setRecvPortID(bridge$EN_nocPort_setRecvPortID),
					  .EN_nocPort_putFlitSoft_put(bridge$EN_nocPort_putFlitSoft_put),
					  .EN_nocPort_getFlitSoft_get(bridge$EN_nocPort_getFlitSoft_get),
					  .EN_corePort_0_put(bridge$EN_corePort_0_put),
					  .EN_corePort_0_get(bridge$EN_corePort_0_get),
					  .EN_corePort_1_put(bridge$EN_corePort_1_put),
					  .EN_corePort_1_get(bridge$EN_corePort_1_get),
					  .nocPort_getFlit(bridge$nocPort_getFlit),
					  .RDY_nocPort_getFlit(bridge$RDY_nocPort_getFlit),
					  .RDY_nocPort_setNonFullVC(),
					  .RDY_nocPort_setRecvFlit(),
					  .nocPort_getRecvVCMask(bridge$nocPort_getRecvVCMask),
					  .RDY_nocPort_getRecvVCMask(bridge$RDY_nocPort_getRecvVCMask),
					  .RDY_nocPort_setRecvPortID(),
					  .RDY_nocPort_putFlitSoft_put(bridge$RDY_nocPort_putFlitSoft_put),
					  .nocPort_getFlitSoft_get(bridge$nocPort_getFlitSoft_get),
					  .RDY_nocPort_getFlitSoft_get(bridge$RDY_nocPort_getFlitSoft_get),
					  .RDY_corePort_0_put(bridge$RDY_corePort_0_put),
					  .corePort_0_get(bridge$corePort_0_get),
					  .RDY_corePort_0_get(bridge$RDY_corePort_0_get),
					  .RDY_corePort_1_put(bridge$RDY_corePort_1_put),
					  .corePort_1_get(bridge$corePort_1_get),
					  .RDY_corePort_1_get(bridge$RDY_corePort_1_get));

  // submodule core_mergeF_dataQ
  FIFO2 #(.width(32'd34), .guarded(32'd1)) core_mergeF_dataQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(core_mergeF_dataQ$D_IN),
							     .ENQ(core_mergeF_dataQ$ENQ),
							     .DEQ(core_mergeF_dataQ$DEQ),
							     .CLR(core_mergeF_dataQ$CLR),
							     .D_OUT(),
							     .FULL_N(),
							     .EMPTY_N());

  // submodule fromCore_outFifo_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) fromCore_outFifo_0(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(fromCore_outFifo_0$D_IN),
							      .ENQ(fromCore_outFifo_0$ENQ),
							      .DEQ(fromCore_outFifo_0$DEQ),
							      .CLR(fromCore_outFifo_0$CLR),
							      .D_OUT(fromCore_outFifo_0$D_OUT),
							      .FULL_N(fromCore_outFifo_0$FULL_N),
							      .EMPTY_N(fromCore_outFifo_0$EMPTY_N));

  // submodule fromCore_outFifo_1
  FIFO2 #(.width(32'd32), .guarded(32'd1)) fromCore_outFifo_1(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(fromCore_outFifo_1$D_IN),
							      .ENQ(fromCore_outFifo_1$ENQ),
							      .DEQ(fromCore_outFifo_1$DEQ),
							      .CLR(fromCore_outFifo_1$CLR),
							      .D_OUT(fromCore_outFifo_1$D_OUT),
							      .FULL_N(fromCore_outFifo_1$FULL_N),
							      .EMPTY_N(fromCore_outFifo_1$EMPTY_N));

  // submodule pkt_c2nw
  FIFO2 #(.width(32'd34), .guarded(32'd1)) pkt_c2nw(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(pkt_c2nw$D_IN),
						    .ENQ(pkt_c2nw$ENQ),
						    .DEQ(pkt_c2nw$DEQ),
						    .CLR(pkt_c2nw$CLR),
						    .D_OUT(pkt_c2nw$D_OUT),
						    .FULL_N(pkt_c2nw$FULL_N),
						    .EMPTY_N(pkt_c2nw$EMPTY_N));

  // submodule pkt_nw2c_0
  FIFO2 #(.width(32'd33), .guarded(32'd1)) pkt_nw2c_0(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(pkt_nw2c_0$D_IN),
						      .ENQ(pkt_nw2c_0$ENQ),
						      .DEQ(pkt_nw2c_0$DEQ),
						      .CLR(pkt_nw2c_0$CLR),
						      .D_OUT(pkt_nw2c_0$D_OUT),
						      .FULL_N(pkt_nw2c_0$FULL_N),
						      .EMPTY_N(pkt_nw2c_0$EMPTY_N));

  // submodule splf_c2nw_dataQ
  FIFO2 #(.width(32'd165), .guarded(32'd1)) splf_c2nw_dataQ(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(splf_c2nw_dataQ$D_IN),
							    .ENQ(splf_c2nw_dataQ$ENQ),
							    .DEQ(splf_c2nw_dataQ$DEQ),
							    .CLR(splf_c2nw_dataQ$CLR),
							    .D_OUT(splf_c2nw_dataQ$D_OUT),
							    .FULL_N(),
							    .EMPTY_N(splf_c2nw_dataQ$EMPTY_N));

  // submodule splf_nw2c_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) splf_nw2c_0(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(splf_nw2c_0$D_IN),
						       .ENQ(splf_nw2c_0$ENQ),
						       .DEQ(splf_nw2c_0$DEQ),
						       .CLR(splf_nw2c_0$CLR),
						       .D_OUT(),
						       .FULL_N(splf_nw2c_0$FULL_N),
						       .EMPTY_N());

  // submodule splf_nw2c_1
  FIFO2 #(.width(32'd32), .guarded(32'd1)) splf_nw2c_1(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(splf_nw2c_1$D_IN),
						       .ENQ(splf_nw2c_1$ENQ),
						       .DEQ(splf_nw2c_1$DEQ),
						       .CLR(splf_nw2c_1$CLR),
						       .D_OUT(),
						       .FULL_N(splf_nw2c_1$FULL_N),
						       .EMPTY_N());

  // submodule splf_nw2c_2
  FIFO2 #(.width(32'd32), .guarded(32'd1)) splf_nw2c_2(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(splf_nw2c_2$D_IN),
						       .ENQ(splf_nw2c_2$ENQ),
						       .DEQ(splf_nw2c_2$DEQ),
						       .CLR(splf_nw2c_2$CLR),
						       .D_OUT(),
						       .FULL_N(splf_nw2c_2$FULL_N),
						       .EMPTY_N());

  // submodule splf_nw2c_3
  FIFO2 #(.width(32'd32), .guarded(32'd1)) splf_nw2c_3(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(splf_nw2c_3$D_IN),
						       .ENQ(splf_nw2c_3$ENQ),
						       .DEQ(splf_nw2c_3$DEQ),
						       .CLR(splf_nw2c_3$CLR),
						       .D_OUT(),
						       .FULL_N(splf_nw2c_3$FULL_N),
						       .EMPTY_N());

  // submodule splf_nw2c_4
  FIFO2 #(.width(32'd32), .guarded(32'd1)) splf_nw2c_4(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(splf_nw2c_4$D_IN),
						       .ENQ(splf_nw2c_4$ENQ),
						       .DEQ(splf_nw2c_4$DEQ),
						       .CLR(splf_nw2c_4$CLR),
						       .D_OUT(),
						       .FULL_N(splf_nw2c_4$FULL_N),
						       .EMPTY_N());

  // submodule toCore_inFifo_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) toCore_inFifo_0(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(toCore_inFifo_0$D_IN),
							   .ENQ(toCore_inFifo_0$ENQ),
							   .DEQ(toCore_inFifo_0$DEQ),
							   .CLR(toCore_inFifo_0$CLR),
							   .D_OUT(toCore_inFifo_0$D_OUT),
							   .FULL_N(toCore_inFifo_0$FULL_N),
							   .EMPTY_N(toCore_inFifo_0$EMPTY_N));

  // submodule toCore_inFifo_1
  FIFO2 #(.width(32'd32), .guarded(32'd1)) toCore_inFifo_1(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(toCore_inFifo_1$D_IN),
							   .ENQ(toCore_inFifo_1$ENQ),
							   .DEQ(toCore_inFifo_1$DEQ),
							   .CLR(toCore_inFifo_1$CLR),
							   .D_OUT(toCore_inFifo_1$D_OUT),
							   .FULL_N(toCore_inFifo_1$FULL_N),
							   .EMPTY_N(toCore_inFifo_1$EMPTY_N));

  // rule RL_mkConnectionAVtoAf
  assign CAN_FIRE_RL_mkConnectionAVtoAf =
	     bridge$RDY_corePort_0_get && toCore_inFifo_0$FULL_N ;

  // rule RL_mkConnectionAVtoAf_1
  assign CAN_FIRE_RL_mkConnectionAVtoAf_1 =
	     bridge$RDY_corePort_0_put && fromCore_outFifo_0$EMPTY_N ;

  // rule RL_core_fsm_start
  assign WILL_FIRE_RL_core_fsm_start =
	     core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252 &&
	     core_start_reg ;

  // rule RL_fromCore_priority_spl
  assign WILL_FIRE_RL_fromCore_priority_spl =
	     splf_c2nw_dataQ$EMPTY_N && splf_c2nw_m_firstIndex$wget[3] &&
	     splf_c2nw_m_firstValue_whas__73_AND_splf_c2nw__ETC___d281 &&
	     !WILL_FIRE_RL_fromCore_r_rest ;

  // rule RL_fromCore_r_first
  assign WILL_FIRE_RL_fromCore_r_first =
	     pkt_c2nw$EMPTY_N && fromCore_outFifo_0$FULL_N &&
	     fromCore_outFifo_1$FULL_N &&
	     fromCore_flits2send == 16'd0 &&
	     !WILL_FIRE_RL_fromCore_priority_spl ;

  // rule RL_fromCore_r_rest
  assign WILL_FIRE_RL_fromCore_r_rest =
	     fromCore_outFifo_0$FULL_N && fromCore_outFifo_1$FULL_N &&
	     fromCore_flits2send != 16'd0 ;

  // rule RL_toCore_pack
  assign WILL_FIRE_RL_toCore_pack =
	     toCore_inFifo_0$EMPTY_N && splf_nw2c_0$FULL_N &&
	     splf_nw2c_1_i_notFull__54_AND_splf_nw2c_2_i_no_ETC___d360 &&
	     pkt_nw2c_0$FULL_N ;

  // rule RL_toCore_pack_1
  assign WILL_FIRE_RL_toCore_pack_1 =
	     toCore_inFifo_1$EMPTY_N && splf_nw2c_0$FULL_N &&
	     splf_nw2c_1_i_notFull__54_AND_splf_nw2c_2_i_no_ETC___d360 &&
	     pkt_nw2c_0$FULL_N &&
	     !WILL_FIRE_RL_toCore_pack ;

  // inputs to muxes for submodule ports
  assign MUX_core_start_reg$write_1__SEL_2 =
	     core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252 &&
	     !core_start_reg &&
	     !core_running ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_2 =
	     core_start_wire$whas && core_state_mkFSMstate == 4'd0 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_3 =
	     core_dtlogger_initialized &&
	     (core_state_mkFSMstate == 4'd1 ||
	      core_state_mkFSMstate == 4'd8) ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_4 =
	     pkt_nw2c_0$EMPTY_N && core_state_mkFSMstate == 4'd2 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_5 =
	     core_dtlogger_initialized && core_state_mkFSMstate == 4'd3 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_6 =
	     core_dtlogger_initialized && core_state_mkFSMstate == 4'd4 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_7 =
	     core_dtlogger_initialized && core_state_mkFSMstate == 4'd5 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_8 =
	     pkt_c2nw$FULL_N && core_state_mkFSMstate == 4'd6 ;
  assign MUX_core_state_mkFSMstate$write_1__SEL_9 =
	     core_dtlogger_initialized && core_state_mkFSMstate == 4'd7 ;
  assign MUX_fromCore_outFifo_0$enq_1__SEL_1 =
	     WILL_FIRE_RL_fromCore_priority_spl &&
	     splf_c2nw_m_firstValue$wget[25] == 1'd0 ;
  assign MUX_fromCore_outFifo_0$enq_1__SEL_2 =
	     WILL_FIRE_RL_fromCore_r_rest && fromCore_outvc == 1'd0 ;
  assign MUX_fromCore_outFifo_0$enq_1__SEL_3 =
	     WILL_FIRE_RL_fromCore_r_first && fromCore_outvc == 1'd0 ;
  assign MUX_fromCore_outFifo_1$enq_1__SEL_1 =
	     WILL_FIRE_RL_fromCore_priority_spl &&
	     splf_c2nw_m_firstValue$wget[25] == 1'd1 ;
  assign MUX_fromCore_outFifo_1$enq_1__SEL_2 =
	     WILL_FIRE_RL_fromCore_r_rest && fromCore_outvc == 1'd1 ;
  assign MUX_fromCore_outFifo_1$enq_1__SEL_3 =
	     WILL_FIRE_RL_fromCore_r_first && fromCore_outvc == 1'd1 ;
  assign MUX_pkt_nw2c_0$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack && toCore_fc_0 != 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_splf_nw2c_0$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd0 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_splf_nw2c_1$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd1 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_splf_nw2c_2$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd2 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_splf_nw2c_3$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd3 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_splf_nw2c_4$enq_1__SEL_1 =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd4 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ;
  assign MUX_fromCore_flits2send$write_1__VAL_1 =
	     fromCore_flits2send - 16'd1 ;
  assign MUX_fromCore_outFifo_0$enq_1__VAL_2 =
	     { 1'd1,
	       fromCore_flits2send == 16'd1,
	       fromCore_dstaddr,
	       fromCore_outvc,
	       xdata__h39600 } ;
  assign MUX_fromCore_outFifo_0$enq_1__VAL_3 =
	     { 2'd2, pkt_c2nw$D_OUT[33:30], pkt_c2nw$D_OUT[4], 25'd2097152 } ;
  assign MUX_pkt_nw2c_0$enq_1__VAL_1 =
	     { toCore_staging_0[32:29],
	       (toCore_fc_0 == 8'd1) ?
		 toCore_inFifo_0$D_OUT[24:0] :
		 toCore_staging_0[28:4],
	       toCore_staging_0[3:0] } ;
  assign MUX_pkt_nw2c_0$enq_1__VAL_2 =
	     { toCore_staging_1[32:29],
	       (toCore_fc_1 == 8'd1) ?
		 toCore_inFifo_1$D_OUT[24:0] :
		 toCore_staging_1[28:4],
	       toCore_staging_1[3:0] } ;

  // inlined wires
  assign splf_c2nw_m_firstIndex$wget =
	     { splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33 ||
	       splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[0] ||
	       splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[1] ||
	       splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[2] ||
	       splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[3],
	       (!splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33 &&
		!splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[0] &&
		!splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[1] &&
		!splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[2]) ?
		 3'd4 :
		 ((!splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33 &&
		   !splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[0]) ?
		    (splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41[1] ?
		       3'd2 :
		       3'd3) :
		    (splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33 ?
		       3'd0 :
		       3'd1)) } ;
  assign splf_c2nw_m_firstValue$wget =
	     { !CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3,
	       x__h6618,
	       x__h6659,
	       SEL_ARR_splf_c2nw_dataQ_first__9_BITS_29_TO_26_ETC___d114 } ;
  assign splf_c2nw_m_firstValue$whas =
	     splf_c2nw_dataQ$EMPTY_N && splf_c2nw_m_firstIndex$wget[3] ;
  assign splf_c2nw_m_firstIsLastInDataQ$whas =
	     splf_c2nw_dataQ$EMPTY_N && splf_c2nw_m_firstIndex$wget[3] &&
	     NOT_splf_c2nw_dataQ_first__9_BIT_32_0_AND_NOT__ETC___d150 ;
  assign core_start_wire$whas =
	     WILL_FIRE_RL_core_fsm_start ||
	     core_start_reg_1 && !core_state_fired ;
  assign core_state_set_pw$whas =
	     MUX_core_state_mkFSMstate$write_1__SEL_9 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_5 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_4 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_3 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_2 ;

  // register core_dtlogger_cticks
  assign core_dtlogger_cticks$D_IN = core_dtlogger_cticks + 32'd1 ;
  assign core_dtlogger_cticks$EN = 1'd1 ;

  // register core_dtlogger_dlog
  assign core_dtlogger_dlog$D_IN = TASK_fopen___d171 ;
  assign core_dtlogger_dlog$EN = !core_dtlogger_initialized ;

  // register core_dtlogger_initialized
  assign core_dtlogger_initialized$D_IN = 1'd1 ;
  assign core_dtlogger_initialized$EN = !core_dtlogger_initialized ;

  // register core_dtlogger_tlog
  assign core_dtlogger_tlog$D_IN = TASK_fopen___d172 ;
  assign core_dtlogger_tlog$EN = !core_dtlogger_initialized ;

  // register core_mergeF_m_notDeqPort
  assign core_mergeF_m_notDeqPort$D_IN = 1'b0 ;
  assign core_mergeF_m_notDeqPort$EN = 1'b0 ;

  // register core_running
  assign core_running$D_IN = 1'd1 ;
  assign core_running$EN = MUX_core_start_reg$write_1__SEL_2 ;

  // register core_saved_source_address
  assign core_saved_source_address$D_IN = pkt_nw2c_0$D_OUT[32:29] ;
  assign core_saved_source_address$EN =
	     MUX_core_state_mkFSMstate$write_1__SEL_4 ;

  // register core_start_reg
  assign core_start_reg$D_IN = !WILL_FIRE_RL_core_fsm_start ;
  assign core_start_reg$EN =
	     WILL_FIRE_RL_core_fsm_start ||
	     core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252 &&
	     !core_start_reg &&
	     !core_running ;

  // register core_start_reg_1
  assign core_start_reg_1$D_IN = core_start_wire$whas ;
  assign core_start_reg_1$EN = 1'd1 ;

  // register core_state_can_overlap
  assign core_state_can_overlap$D_IN =
	     core_state_set_pw$whas || core_state_can_overlap ;
  assign core_state_can_overlap$EN = 1'd1 ;

  // register core_state_fired
  assign core_state_fired$D_IN = core_state_set_pw$whas ;
  assign core_state_fired$EN = 1'd1 ;

  // register core_state_mkFSMstate
  always@(MUX_core_state_mkFSMstate$write_1__SEL_2 or
	  MUX_core_state_mkFSMstate$write_1__SEL_3 or
	  MUX_core_state_mkFSMstate$write_1__SEL_4 or
	  MUX_core_state_mkFSMstate$write_1__SEL_5 or
	  MUX_core_state_mkFSMstate$write_1__SEL_6 or
	  MUX_core_state_mkFSMstate$write_1__SEL_7 or
	  MUX_core_state_mkFSMstate$write_1__SEL_8 or
	  MUX_core_state_mkFSMstate$write_1__SEL_9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_core_state_mkFSMstate$write_1__SEL_2:
	  core_state_mkFSMstate$D_IN = 4'd1;
      MUX_core_state_mkFSMstate$write_1__SEL_3:
	  core_state_mkFSMstate$D_IN = 4'd2;
      MUX_core_state_mkFSMstate$write_1__SEL_4:
	  core_state_mkFSMstate$D_IN = 4'd3;
      MUX_core_state_mkFSMstate$write_1__SEL_5:
	  core_state_mkFSMstate$D_IN = 4'd4;
      MUX_core_state_mkFSMstate$write_1__SEL_6:
	  core_state_mkFSMstate$D_IN = 4'd5;
      MUX_core_state_mkFSMstate$write_1__SEL_7:
	  core_state_mkFSMstate$D_IN = 4'd6;
      MUX_core_state_mkFSMstate$write_1__SEL_8:
	  core_state_mkFSMstate$D_IN = 4'd7;
      MUX_core_state_mkFSMstate$write_1__SEL_9:
	  core_state_mkFSMstate$D_IN = 4'd8;
      default: core_state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign core_state_mkFSMstate$EN =
	     MUX_core_state_mkFSMstate$write_1__SEL_2 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_3 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_4 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_5 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	     MUX_core_state_mkFSMstate$write_1__SEL_9 ;

  // register core_task_info
  assign core_task_info$D_IN = 8'h0 ;
  assign core_task_info$EN = 1'b0 ;

  // register core_x
  assign core_x$D_IN = pkt_nw2c_0$D_OUT[28:4] ;
  assign core_x$EN = MUX_core_state_mkFSMstate$write_1__SEL_4 ;

  // register fromCore_dstaddr
  assign fromCore_dstaddr$D_IN = pkt_c2nw$D_OUT[33:30] ;
  assign fromCore_dstaddr$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_dtlogger_cticks
  assign fromCore_dtlogger_cticks$D_IN = fromCore_dtlogger_cticks + 32'd1 ;
  assign fromCore_dtlogger_cticks$EN = 1'd1 ;

  // register fromCore_dtlogger_dlog
  assign fromCore_dtlogger_dlog$D_IN = TASK_fopen___d263 ;
  assign fromCore_dtlogger_dlog$EN = !fromCore_dtlogger_initialized ;

  // register fromCore_dtlogger_initialized
  assign fromCore_dtlogger_initialized$D_IN = 1'd1 ;
  assign fromCore_dtlogger_initialized$EN = !fromCore_dtlogger_initialized ;

  // register fromCore_dtlogger_tlog
  assign fromCore_dtlogger_tlog$D_IN = TASK_fopen___d264 ;
  assign fromCore_dtlogger_tlog$EN = !fromCore_dtlogger_initialized ;

  // register fromCore_f_idx
  assign fromCore_f_idx$D_IN =
	     (fromCore_flits2send == 16'd1) ? 16'd0 : x__h39536 ;
  assign fromCore_f_idx$EN = WILL_FIRE_RL_fromCore_r_rest ;

  // register fromCore_flits2send
  assign fromCore_flits2send$D_IN =
	     WILL_FIRE_RL_fromCore_r_rest ?
	       MUX_fromCore_flits2send$write_1__VAL_1 :
	       16'd1 ;
  assign fromCore_flits2send$EN =
	     WILL_FIRE_RL_fromCore_r_rest || WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_outvc
  assign fromCore_outvc$D_IN = pkt_c2nw$D_OUT[4] ;
  assign fromCore_outvc$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_0
  assign fromCore_vflits_0$D_IN = pkt_c2nw$D_OUT[29:5] ;
  assign fromCore_vflits_0$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_1
  assign fromCore_vflits_1$D_IN = 25'd0 ;
  assign fromCore_vflits_1$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_10
  assign fromCore_vflits_10$D_IN = 25'd0 ;
  assign fromCore_vflits_10$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_11
  assign fromCore_vflits_11$D_IN = 25'd0 ;
  assign fromCore_vflits_11$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_12
  assign fromCore_vflits_12$D_IN = 25'd0 ;
  assign fromCore_vflits_12$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_13
  assign fromCore_vflits_13$D_IN = 25'd0 ;
  assign fromCore_vflits_13$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_14
  assign fromCore_vflits_14$D_IN = 25'd0 ;
  assign fromCore_vflits_14$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_15
  assign fromCore_vflits_15$D_IN = 25'd0 ;
  assign fromCore_vflits_15$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_16
  assign fromCore_vflits_16$D_IN = 25'd0 ;
  assign fromCore_vflits_16$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_17
  assign fromCore_vflits_17$D_IN = 25'd0 ;
  assign fromCore_vflits_17$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_18
  assign fromCore_vflits_18$D_IN = 25'd0 ;
  assign fromCore_vflits_18$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_19
  assign fromCore_vflits_19$D_IN = 25'd0 ;
  assign fromCore_vflits_19$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_2
  assign fromCore_vflits_2$D_IN = 25'd0 ;
  assign fromCore_vflits_2$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_3
  assign fromCore_vflits_3$D_IN = 25'd0 ;
  assign fromCore_vflits_3$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_4
  assign fromCore_vflits_4$D_IN = 25'd0 ;
  assign fromCore_vflits_4$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_5
  assign fromCore_vflits_5$D_IN = 25'd0 ;
  assign fromCore_vflits_5$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_6
  assign fromCore_vflits_6$D_IN = 25'd0 ;
  assign fromCore_vflits_6$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_7
  assign fromCore_vflits_7$D_IN = 25'd0 ;
  assign fromCore_vflits_7$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_8
  assign fromCore_vflits_8$D_IN = 25'd0 ;
  assign fromCore_vflits_8$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register fromCore_vflits_9
  assign fromCore_vflits_9$D_IN = 25'd0 ;
  assign fromCore_vflits_9$EN = WILL_FIRE_RL_fromCore_r_first ;

  // register splf_c2nw_m_notDeqPort
  assign splf_c2nw_m_notDeqPort$D_IN =
	     splf_c2nw_m_firstIsLastInDataQ$whas ?
	       5'd31 :
	       { splf_c2nw_m_firstIndex$wget[2:0] != 3'd4 &&
		 splf_c2nw_m_notDeqPort[4],
		 splf_c2nw_m_firstIndex$wget[2:0] != 3'd3 &&
		 splf_c2nw_m_notDeqPort[3],
		 splf_c2nw_m_firstIndex$wget[2:0] != 3'd2 &&
		 splf_c2nw_m_notDeqPort[2],
		 splf_c2nw_m_firstIndex$wget[2:0] != 3'd1 &&
		 splf_c2nw_m_notDeqPort[1],
		 splf_c2nw_m_firstIndex$wget[2:0] != 3'd0 &&
		 splf_c2nw_m_notDeqPort[0] } ;
  assign splf_c2nw_m_notDeqPort$EN = WILL_FIRE_RL_fromCore_priority_spl ;

  // register toCore_dtlogger_cticks
  assign toCore_dtlogger_cticks$D_IN = toCore_dtlogger_cticks + 32'd1 ;
  assign toCore_dtlogger_cticks$EN = 1'd1 ;

  // register toCore_dtlogger_dlog
  assign toCore_dtlogger_dlog$D_IN = TASK_fopen___d342 ;
  assign toCore_dtlogger_dlog$EN = !toCore_dtlogger_initialized ;

  // register toCore_dtlogger_initialized
  assign toCore_dtlogger_initialized$D_IN = 1'd1 ;
  assign toCore_dtlogger_initialized$EN = !toCore_dtlogger_initialized ;

  // register toCore_dtlogger_tlog
  assign toCore_dtlogger_tlog$D_IN = TASK_fopen___d343 ;
  assign toCore_dtlogger_tlog$EN = !toCore_dtlogger_initialized ;

  // register toCore_fc_0
  assign toCore_fc_0$D_IN = toCore_inFifo_0$D_OUT[30] ? 8'd0 : x__h41185 ;
  assign toCore_fc_0$EN = WILL_FIRE_RL_toCore_pack ;

  // register toCore_fc_1
  assign toCore_fc_1$D_IN = toCore_inFifo_1$D_OUT[30] ? 8'd0 : x__h44878 ;
  assign toCore_fc_1$EN = WILL_FIRE_RL_toCore_pack_1 ;

  // register toCore_staging_0
  assign toCore_staging_0$D_IN =
	     (toCore_fc_0 == 8'd0) ?
	       { toCore_inFifo_0$D_OUT[24:21], 29'd0 } :
	       { toCore_staging_0[32:29],
		 (toCore_fc_0 == 8'd1) ?
		   toCore_inFifo_0$D_OUT[24:0] :
		   toCore_staging_0[28:4],
		 toCore_staging_0[3:0] } ;
  assign toCore_staging_0$EN =
	     WILL_FIRE_RL_toCore_pack && !toCore_inFifo_0$D_OUT[30] ;

  // register toCore_staging_1
  assign toCore_staging_1$D_IN =
	     (toCore_fc_1 == 8'd0) ?
	       { toCore_inFifo_1$D_OUT[24:21], 29'd0 } :
	       { toCore_staging_1[32:29],
		 (toCore_fc_1 == 8'd1) ?
		   toCore_inFifo_1$D_OUT[24:0] :
		   toCore_staging_1[28:4],
		 toCore_staging_1[3:0] } ;
  assign toCore_staging_1$EN =
	     WILL_FIRE_RL_toCore_pack_1 && !toCore_inFifo_1$D_OUT[30] ;

  // submodule bridge
  assign bridge$corePort_0_put_flit = fromCore_outFifo_0$D_OUT ;
  assign bridge$corePort_1_put_flit = fromCore_outFifo_1$D_OUT ;
  assign bridge$nocPort_putFlitSoft_put = putFlitSoft_put ;
  assign bridge$nocPort_setNonFullVC_vcmask = setNonFullVC_vcmask ;
  assign bridge$nocPort_setRecvFlit_flit = setRecvFlit_flit ;
  assign bridge$nocPort_setRecvPortID_portid = setRecvPortID_portid ;
  assign bridge$EN_nocPort_getFlit = EN_getFlit ;
  assign bridge$EN_nocPort_setNonFullVC = EN_setNonFullVC ;
  assign bridge$EN_nocPort_setRecvFlit = EN_setRecvFlit ;
  assign bridge$EN_nocPort_setRecvPortID = EN_setRecvPortID ;
  assign bridge$EN_nocPort_putFlitSoft_put = EN_putFlitSoft_put ;
  assign bridge$EN_nocPort_getFlitSoft_get = EN_getFlitSoft_get ;
  assign bridge$EN_corePort_0_put =
	     CAN_FIRE_RL_mkConnectionAVtoAf_1 && !EN_putFlitSoft_put ;
  assign bridge$EN_corePort_0_get =
	     CAN_FIRE_RL_mkConnectionAVtoAf && !EN_getFlitSoft_get ;
  assign bridge$EN_corePort_1_put =
	     bridge$RDY_corePort_1_put && fromCore_outFifo_1$EMPTY_N ;
  assign bridge$EN_corePort_1_get =
	     bridge$RDY_corePort_1_get && toCore_inFifo_1$FULL_N ;

  // submodule core_mergeF_dataQ
  assign core_mergeF_dataQ$D_IN = 34'b0 ;
  assign core_mergeF_dataQ$ENQ = 1'b0 ;
  assign core_mergeF_dataQ$DEQ = 1'b0 ;
  assign core_mergeF_dataQ$CLR = 1'b0 ;

  // submodule fromCore_outFifo_0
  always@(MUX_fromCore_outFifo_0$enq_1__SEL_1 or
	  splf_c2nw_m_firstValue$wget or
	  MUX_fromCore_outFifo_0$enq_1__SEL_2 or
	  MUX_fromCore_outFifo_0$enq_1__VAL_2 or
	  MUX_fromCore_outFifo_0$enq_1__SEL_3 or
	  MUX_fromCore_outFifo_0$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fromCore_outFifo_0$enq_1__SEL_1:
	  fromCore_outFifo_0$D_IN = splf_c2nw_m_firstValue$wget[31:0];
      MUX_fromCore_outFifo_0$enq_1__SEL_2:
	  fromCore_outFifo_0$D_IN = MUX_fromCore_outFifo_0$enq_1__VAL_2;
      MUX_fromCore_outFifo_0$enq_1__SEL_3:
	  fromCore_outFifo_0$D_IN = MUX_fromCore_outFifo_0$enq_1__VAL_3;
      default: fromCore_outFifo_0$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fromCore_outFifo_0$ENQ =
	     WILL_FIRE_RL_fromCore_priority_spl &&
	     splf_c2nw_m_firstValue$wget[25] == 1'd0 ||
	     WILL_FIRE_RL_fromCore_r_rest && fromCore_outvc == 1'd0 ||
	     WILL_FIRE_RL_fromCore_r_first && fromCore_outvc == 1'd0 ;
  assign fromCore_outFifo_0$DEQ =
	     CAN_FIRE_RL_mkConnectionAVtoAf_1 && !EN_putFlitSoft_put ;
  assign fromCore_outFifo_0$CLR = 1'b0 ;

  // submodule fromCore_outFifo_1
  always@(MUX_fromCore_outFifo_1$enq_1__SEL_1 or
	  splf_c2nw_m_firstValue$wget or
	  MUX_fromCore_outFifo_1$enq_1__SEL_2 or
	  MUX_fromCore_outFifo_0$enq_1__VAL_2 or
	  MUX_fromCore_outFifo_1$enq_1__SEL_3 or
	  MUX_fromCore_outFifo_0$enq_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_fromCore_outFifo_1$enq_1__SEL_1:
	  fromCore_outFifo_1$D_IN = splf_c2nw_m_firstValue$wget[31:0];
      MUX_fromCore_outFifo_1$enq_1__SEL_2:
	  fromCore_outFifo_1$D_IN = MUX_fromCore_outFifo_0$enq_1__VAL_2;
      MUX_fromCore_outFifo_1$enq_1__SEL_3:
	  fromCore_outFifo_1$D_IN = MUX_fromCore_outFifo_0$enq_1__VAL_3;
      default: fromCore_outFifo_1$D_IN =
		   32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign fromCore_outFifo_1$ENQ =
	     WILL_FIRE_RL_fromCore_priority_spl &&
	     splf_c2nw_m_firstValue$wget[25] == 1'd1 ||
	     WILL_FIRE_RL_fromCore_r_rest && fromCore_outvc == 1'd1 ||
	     WILL_FIRE_RL_fromCore_r_first && fromCore_outvc == 1'd1 ;
  assign fromCore_outFifo_1$DEQ =
	     bridge$RDY_corePort_1_put && fromCore_outFifo_1$EMPTY_N ;
  assign fromCore_outFifo_1$CLR = 1'b0 ;

  // submodule pkt_c2nw
  assign pkt_c2nw$D_IN = { 4'd0, core_x, 5'd0 } ;
  assign pkt_c2nw$ENQ = MUX_core_state_mkFSMstate$write_1__SEL_8 ;
  assign pkt_c2nw$DEQ = WILL_FIRE_RL_fromCore_r_first ;
  assign pkt_c2nw$CLR = 1'b0 ;

  // submodule pkt_nw2c_0
  assign pkt_nw2c_0$D_IN =
	     MUX_pkt_nw2c_0$enq_1__SEL_1 ?
	       MUX_pkt_nw2c_0$enq_1__VAL_1 :
	       MUX_pkt_nw2c_0$enq_1__VAL_2 ;
  assign pkt_nw2c_0$ENQ =
	     WILL_FIRE_RL_toCore_pack && toCore_fc_0 != 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 && toCore_fc_1 != 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign pkt_nw2c_0$DEQ = MUX_core_state_mkFSMstate$write_1__SEL_4 ;
  assign pkt_nw2c_0$CLR = 1'b0 ;

  // submodule splf_c2nw_dataQ
  assign splf_c2nw_dataQ$D_IN = 165'b0 ;
  assign splf_c2nw_dataQ$ENQ = 1'b0 ;
  assign splf_c2nw_dataQ$DEQ =
	     WILL_FIRE_RL_fromCore_priority_spl &&
	     splf_c2nw_m_firstIsLastInDataQ$whas ;
  assign splf_c2nw_dataQ$CLR = 1'b0 ;

  // submodule splf_nw2c_0
  assign splf_nw2c_0$D_IN =
	     MUX_splf_nw2c_0$enq_1__SEL_1 ?
	       toCore_inFifo_0$D_OUT :
	       toCore_inFifo_1$D_OUT ;
  assign splf_nw2c_0$ENQ =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd0 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 &&
	     IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 ==
	     32'd0 &&
	     toCore_fc_1 == 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign splf_nw2c_0$DEQ = 1'b0 ;
  assign splf_nw2c_0$CLR = 1'b0 ;

  // submodule splf_nw2c_1
  assign splf_nw2c_1$D_IN =
	     MUX_splf_nw2c_1$enq_1__SEL_1 ?
	       toCore_inFifo_0$D_OUT :
	       toCore_inFifo_1$D_OUT ;
  assign splf_nw2c_1$ENQ =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd1 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 &&
	     IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 ==
	     32'd1 &&
	     toCore_fc_1 == 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign splf_nw2c_1$DEQ = 1'b0 ;
  assign splf_nw2c_1$CLR = 1'b0 ;

  // submodule splf_nw2c_2
  assign splf_nw2c_2$D_IN =
	     MUX_splf_nw2c_2$enq_1__SEL_1 ?
	       toCore_inFifo_0$D_OUT :
	       toCore_inFifo_1$D_OUT ;
  assign splf_nw2c_2$ENQ =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd2 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 &&
	     IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 ==
	     32'd2 &&
	     toCore_fc_1 == 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign splf_nw2c_2$DEQ = 1'b0 ;
  assign splf_nw2c_2$CLR = 1'b0 ;

  // submodule splf_nw2c_3
  assign splf_nw2c_3$D_IN =
	     MUX_splf_nw2c_3$enq_1__SEL_1 ?
	       toCore_inFifo_0$D_OUT :
	       toCore_inFifo_1$D_OUT ;
  assign splf_nw2c_3$ENQ =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd3 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 &&
	     IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 ==
	     32'd3 &&
	     toCore_fc_1 == 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign splf_nw2c_3$DEQ = 1'b0 ;
  assign splf_nw2c_3$CLR = 1'b0 ;

  // submodule splf_nw2c_4
  assign splf_nw2c_4$D_IN =
	     MUX_splf_nw2c_4$enq_1__SEL_1 ?
	       toCore_inFifo_0$D_OUT :
	       toCore_inFifo_1$D_OUT ;
  assign splf_nw2c_4$ENQ =
	     WILL_FIRE_RL_toCore_pack &&
	     IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 ==
	     32'd4 &&
	     toCore_fc_0 == 8'd0 &&
	     toCore_inFifo_0$D_OUT[30] ||
	     WILL_FIRE_RL_toCore_pack_1 &&
	     IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 ==
	     32'd4 &&
	     toCore_fc_1 == 8'd0 &&
	     toCore_inFifo_1$D_OUT[30] ;
  assign splf_nw2c_4$DEQ = 1'b0 ;
  assign splf_nw2c_4$CLR = 1'b0 ;

  // submodule toCore_inFifo_0
  assign toCore_inFifo_0$D_IN = bridge$corePort_0_get ;
  assign toCore_inFifo_0$ENQ =
	     CAN_FIRE_RL_mkConnectionAVtoAf && !EN_getFlitSoft_get ;
  assign toCore_inFifo_0$DEQ = WILL_FIRE_RL_toCore_pack ;
  assign toCore_inFifo_0$CLR = 1'b0 ;

  // submodule toCore_inFifo_1
  assign toCore_inFifo_1$D_IN = bridge$corePort_1_get ;
  assign toCore_inFifo_1$ENQ =
	     bridge$RDY_corePort_1_get && toCore_inFifo_1$FULL_N ;
  assign toCore_inFifo_1$DEQ = WILL_FIRE_RL_toCore_pack_1 ;
  assign toCore_inFifo_1$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_splf_c2nw_dataQ_first__9_BIT_32_0_AND_NOT__ETC___d150 =
	     !(splf_c2nw_dataQ$D_OUT[32] &
	       (splf_c2nw_m_firstIndex$wget[2:0] != 3'd0 &&
		splf_c2nw_m_notDeqPort[0])) &&
	     !(splf_c2nw_dataQ$D_OUT[65] &
	       (splf_c2nw_m_firstIndex$wget[2:0] != 3'd1 &&
		splf_c2nw_m_notDeqPort[1])) &&
	     !(splf_c2nw_dataQ$D_OUT[98] &
	       (splf_c2nw_m_firstIndex$wget[2:0] != 3'd2 &&
		splf_c2nw_m_notDeqPort[2])) &&
	     !(splf_c2nw_dataQ$D_OUT[131] &
	       (splf_c2nw_m_firstIndex$wget[2:0] != 3'd3 &&
		splf_c2nw_m_notDeqPort[3])) &&
	     !(splf_c2nw_dataQ$D_OUT[164] &
	       (splf_c2nw_m_firstIndex$wget[2:0] != 3'd4 &&
		splf_c2nw_m_notDeqPort[4])) ;
  assign SEL_ARR_splf_c2nw_dataQ_first__9_BITS_29_TO_26_ETC___d114 =
	     { CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1,
	       x__h6681,
	       CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 } ;
  assign core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252 =
	     core_state_mkFSMstate == 4'd0 &&
	     (!core_start_reg_1 || core_state_fired) ;
  assign splf_c2nw_dataQ_first__9_BIT_164_4_CONCAT_splf_ETC___d41 =
	     { splf_c2nw_dataQ$D_OUT[164],
	       splf_c2nw_dataQ$D_OUT[131],
	       splf_c2nw_dataQ$D_OUT[98],
	       splf_c2nw_dataQ$D_OUT[65] } &
	     splf_c2nw_m_notDeqPort[4:1] ;
  assign splf_c2nw_dataQ_first__9_BIT_32_0_AND_splf_c2n_ETC___d33 =
	     splf_c2nw_dataQ$D_OUT[32] & splf_c2nw_m_notDeqPort[0] ;
  assign splf_c2nw_m_firstValue_whas__73_AND_splf_c2nw__ETC___d281 =
	     splf_c2nw_m_firstValue$whas && splf_c2nw_m_firstValue$wget[32] &&
	     splf_c2nw_dataQ$EMPTY_N &&
	     fromCore_outFifo_0$FULL_N &&
	     fromCore_outFifo_1$FULL_N ;
  assign splf_nw2c_1_i_notFull__54_AND_splf_nw2c_2_i_no_ETC___d360 =
	     splf_nw2c_1$FULL_N && splf_nw2c_2$FULL_N && splf_nw2c_3$FULL_N &&
	     splf_nw2c_4$FULL_N ;
  assign x__h39536 = fromCore_f_idx + 16'd1 ;
  assign x__h39638 = { 16'd0, fromCore_f_idx } ;
  assign x__h41185 = toCore_fc_0 + 8'd1 ;
  assign x__h44878 = toCore_fc_1 + 8'd1 ;
  always@(x__h39638 or
	  fromCore_vflits_0 or
	  fromCore_vflits_1 or
	  fromCore_vflits_2 or
	  fromCore_vflits_3 or
	  fromCore_vflits_4 or
	  fromCore_vflits_5 or
	  fromCore_vflits_6 or
	  fromCore_vflits_7 or
	  fromCore_vflits_8 or
	  fromCore_vflits_9 or
	  fromCore_vflits_10 or
	  fromCore_vflits_11 or
	  fromCore_vflits_12 or
	  fromCore_vflits_13 or
	  fromCore_vflits_14 or
	  fromCore_vflits_15 or
	  fromCore_vflits_16 or
	  fromCore_vflits_17 or fromCore_vflits_18 or fromCore_vflits_19)
  begin
    case (x__h39638)
      32'd0: xdata__h39600 = fromCore_vflits_0;
      32'd1: xdata__h39600 = fromCore_vflits_1;
      32'd2: xdata__h39600 = fromCore_vflits_2;
      32'd3: xdata__h39600 = fromCore_vflits_3;
      32'd4: xdata__h39600 = fromCore_vflits_4;
      32'd5: xdata__h39600 = fromCore_vflits_5;
      32'd6: xdata__h39600 = fromCore_vflits_6;
      32'd7: xdata__h39600 = fromCore_vflits_7;
      32'd8: xdata__h39600 = fromCore_vflits_8;
      32'd9: xdata__h39600 = fromCore_vflits_9;
      32'd10: xdata__h39600 = fromCore_vflits_10;
      32'd11: xdata__h39600 = fromCore_vflits_11;
      32'd12: xdata__h39600 = fromCore_vflits_12;
      32'd13: xdata__h39600 = fromCore_vflits_13;
      32'd14: xdata__h39600 = fromCore_vflits_14;
      32'd15: xdata__h39600 = fromCore_vflits_15;
      32'd16: xdata__h39600 = fromCore_vflits_16;
      32'd17: xdata__h39600 = fromCore_vflits_17;
      32'd18: xdata__h39600 = fromCore_vflits_18;
      32'd19: xdata__h39600 = fromCore_vflits_19;
      default: xdata__h39600 =
		   25'b0101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(toCore_inFifo_0$D_OUT)
  begin
    case (toCore_inFifo_0$D_OUT[24:21])
      4'd0: IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 = 32'd0;
      4'd1: IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 = 32'd2;
      4'd5: IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 = 32'd3;
      4'd6: IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 = 32'd1;
      default: IF_toCore_inFifo_0_first__65_BITS_24_TO_21_78__ETC___d395 =
		   32'd4;
    endcase
  end
  always@(toCore_inFifo_1$D_OUT)
  begin
    case (toCore_inFifo_1$D_OUT[24:21])
      4'd0: IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 = 32'd0;
      4'd1: IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 = 32'd2;
      4'd5: IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 = 32'd3;
      4'd6: IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 = 32'd1;
      default: IF_toCore_inFifo_1_first__11_BITS_24_TO_21_24__ETC___d441 =
		   32'd4;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0: x__h6618 = splf_c2nw_dataQ$D_OUT[31];
      3'd1: x__h6618 = splf_c2nw_dataQ$D_OUT[64];
      3'd2: x__h6618 = splf_c2nw_dataQ$D_OUT[97];
      3'd3: x__h6618 = splf_c2nw_dataQ$D_OUT[130];
      3'd4: x__h6618 = splf_c2nw_dataQ$D_OUT[163];
      default: x__h6618 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0: x__h6659 = splf_c2nw_dataQ$D_OUT[30];
      3'd1: x__h6659 = splf_c2nw_dataQ$D_OUT[63];
      3'd2: x__h6659 = splf_c2nw_dataQ$D_OUT[96];
      3'd3: x__h6659 = splf_c2nw_dataQ$D_OUT[129];
      3'd4: x__h6659 = splf_c2nw_dataQ$D_OUT[162];
      default: x__h6659 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0: x__h6681 = splf_c2nw_dataQ$D_OUT[25];
      3'd1: x__h6681 = splf_c2nw_dataQ$D_OUT[58];
      3'd2: x__h6681 = splf_c2nw_dataQ$D_OUT[91];
      3'd3: x__h6681 = splf_c2nw_dataQ$D_OUT[124];
      3'd4: x__h6681 = splf_c2nw_dataQ$D_OUT[157];
      default: x__h6681 = 1'b0 /* unspecified value */ ;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
	      splf_c2nw_dataQ$D_OUT[29:26];
      3'd1:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
	      splf_c2nw_dataQ$D_OUT[62:59];
      3'd2:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
	      splf_c2nw_dataQ$D_OUT[95:92];
      3'd3:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
	      splf_c2nw_dataQ$D_OUT[128:125];
      3'd4:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
	      splf_c2nw_dataQ$D_OUT[161:158];
      default: CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q1 =
		   4'b1010 /* unspecified value */ ;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
	      splf_c2nw_dataQ$D_OUT[24:0];
      3'd1:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
	      splf_c2nw_dataQ$D_OUT[57:33];
      3'd2:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
	      splf_c2nw_dataQ$D_OUT[90:66];
      3'd3:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
	      splf_c2nw_dataQ$D_OUT[123:99];
      3'd4:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
	      splf_c2nw_dataQ$D_OUT[156:132];
      default: CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q2 =
		   25'b0101010101010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(splf_c2nw_m_firstIndex$wget or splf_c2nw_dataQ$D_OUT)
  begin
    case (splf_c2nw_m_firstIndex$wget[2:0])
      3'd0:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
	      !splf_c2nw_dataQ$D_OUT[32];
      3'd1:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
	      !splf_c2nw_dataQ$D_OUT[65];
      3'd2:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
	      !splf_c2nw_dataQ$D_OUT[98];
      3'd3:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
	      !splf_c2nw_dataQ$D_OUT[131];
      3'd4:
	  CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
	      !splf_c2nw_dataQ$D_OUT[164];
      default: CASE_splf_c2nw_m_firstIndexwget_BITS_2_TO_0_0_ETC__q3 =
		   1'b0 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        core_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY 32'd0;
	core_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	core_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	core_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	core_mergeF_m_notDeqPort <= `BSV_ASSIGNMENT_DELAY 1'd1;
	core_running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	core_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	core_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	core_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	core_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	core_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	core_task_info <= `BSV_ASSIGNMENT_DELAY 8'd1;
	core_x <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fromCore_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fromCore_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	fromCore_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fromCore_f_idx <= `BSV_ASSIGNMENT_DELAY 16'd0;
	fromCore_flits2send <= `BSV_ASSIGNMENT_DELAY 16'd0;
	fromCore_vflits_0 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_1 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_10 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_11 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_12 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_13 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_14 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_15 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_16 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_17 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_18 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_19 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_2 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_3 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_4 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_5 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_6 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_7 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_8 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	fromCore_vflits_9 <= `BSV_ASSIGNMENT_DELAY 25'd0;
	splf_c2nw_m_notDeqPort <= `BSV_ASSIGNMENT_DELAY 5'd31;
	toCore_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY 32'd0;
	toCore_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	toCore_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	toCore_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY 32'd0;
	toCore_fc_0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	toCore_fc_1 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (core_dtlogger_cticks$EN)
	  core_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY
	      core_dtlogger_cticks$D_IN;
	if (core_dtlogger_dlog$EN)
	  core_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY core_dtlogger_dlog$D_IN;
	if (core_dtlogger_initialized$EN)
	  core_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY
	      core_dtlogger_initialized$D_IN;
	if (core_dtlogger_tlog$EN)
	  core_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY core_dtlogger_tlog$D_IN;
	if (core_mergeF_m_notDeqPort$EN)
	  core_mergeF_m_notDeqPort <= `BSV_ASSIGNMENT_DELAY
	      core_mergeF_m_notDeqPort$D_IN;
	if (core_running$EN)
	  core_running <= `BSV_ASSIGNMENT_DELAY core_running$D_IN;
	if (core_start_reg$EN)
	  core_start_reg <= `BSV_ASSIGNMENT_DELAY core_start_reg$D_IN;
	if (core_start_reg_1$EN)
	  core_start_reg_1 <= `BSV_ASSIGNMENT_DELAY core_start_reg_1$D_IN;
	if (core_state_can_overlap$EN)
	  core_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      core_state_can_overlap$D_IN;
	if (core_state_fired$EN)
	  core_state_fired <= `BSV_ASSIGNMENT_DELAY core_state_fired$D_IN;
	if (core_state_mkFSMstate$EN)
	  core_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      core_state_mkFSMstate$D_IN;
	if (core_task_info$EN)
	  core_task_info <= `BSV_ASSIGNMENT_DELAY core_task_info$D_IN;
	if (core_x$EN) core_x <= `BSV_ASSIGNMENT_DELAY core_x$D_IN;
	if (fromCore_dtlogger_cticks$EN)
	  fromCore_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY
	      fromCore_dtlogger_cticks$D_IN;
	if (fromCore_dtlogger_dlog$EN)
	  fromCore_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY
	      fromCore_dtlogger_dlog$D_IN;
	if (fromCore_dtlogger_initialized$EN)
	  fromCore_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY
	      fromCore_dtlogger_initialized$D_IN;
	if (fromCore_dtlogger_tlog$EN)
	  fromCore_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY
	      fromCore_dtlogger_tlog$D_IN;
	if (fromCore_f_idx$EN)
	  fromCore_f_idx <= `BSV_ASSIGNMENT_DELAY fromCore_f_idx$D_IN;
	if (fromCore_flits2send$EN)
	  fromCore_flits2send <= `BSV_ASSIGNMENT_DELAY
	      fromCore_flits2send$D_IN;
	if (fromCore_vflits_0$EN)
	  fromCore_vflits_0 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_0$D_IN;
	if (fromCore_vflits_1$EN)
	  fromCore_vflits_1 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_1$D_IN;
	if (fromCore_vflits_10$EN)
	  fromCore_vflits_10 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_10$D_IN;
	if (fromCore_vflits_11$EN)
	  fromCore_vflits_11 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_11$D_IN;
	if (fromCore_vflits_12$EN)
	  fromCore_vflits_12 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_12$D_IN;
	if (fromCore_vflits_13$EN)
	  fromCore_vflits_13 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_13$D_IN;
	if (fromCore_vflits_14$EN)
	  fromCore_vflits_14 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_14$D_IN;
	if (fromCore_vflits_15$EN)
	  fromCore_vflits_15 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_15$D_IN;
	if (fromCore_vflits_16$EN)
	  fromCore_vflits_16 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_16$D_IN;
	if (fromCore_vflits_17$EN)
	  fromCore_vflits_17 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_17$D_IN;
	if (fromCore_vflits_18$EN)
	  fromCore_vflits_18 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_18$D_IN;
	if (fromCore_vflits_19$EN)
	  fromCore_vflits_19 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_19$D_IN;
	if (fromCore_vflits_2$EN)
	  fromCore_vflits_2 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_2$D_IN;
	if (fromCore_vflits_3$EN)
	  fromCore_vflits_3 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_3$D_IN;
	if (fromCore_vflits_4$EN)
	  fromCore_vflits_4 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_4$D_IN;
	if (fromCore_vflits_5$EN)
	  fromCore_vflits_5 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_5$D_IN;
	if (fromCore_vflits_6$EN)
	  fromCore_vflits_6 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_6$D_IN;
	if (fromCore_vflits_7$EN)
	  fromCore_vflits_7 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_7$D_IN;
	if (fromCore_vflits_8$EN)
	  fromCore_vflits_8 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_8$D_IN;
	if (fromCore_vflits_9$EN)
	  fromCore_vflits_9 <= `BSV_ASSIGNMENT_DELAY fromCore_vflits_9$D_IN;
	if (splf_c2nw_m_notDeqPort$EN)
	  splf_c2nw_m_notDeqPort <= `BSV_ASSIGNMENT_DELAY
	      splf_c2nw_m_notDeqPort$D_IN;
	if (toCore_dtlogger_cticks$EN)
	  toCore_dtlogger_cticks <= `BSV_ASSIGNMENT_DELAY
	      toCore_dtlogger_cticks$D_IN;
	if (toCore_dtlogger_dlog$EN)
	  toCore_dtlogger_dlog <= `BSV_ASSIGNMENT_DELAY
	      toCore_dtlogger_dlog$D_IN;
	if (toCore_dtlogger_initialized$EN)
	  toCore_dtlogger_initialized <= `BSV_ASSIGNMENT_DELAY
	      toCore_dtlogger_initialized$D_IN;
	if (toCore_dtlogger_tlog$EN)
	  toCore_dtlogger_tlog <= `BSV_ASSIGNMENT_DELAY
	      toCore_dtlogger_tlog$D_IN;
	if (toCore_fc_0$EN)
	  toCore_fc_0 <= `BSV_ASSIGNMENT_DELAY toCore_fc_0$D_IN;
	if (toCore_fc_1$EN)
	  toCore_fc_1 <= `BSV_ASSIGNMENT_DELAY toCore_fc_1$D_IN;
      end
    if (core_saved_source_address$EN)
      core_saved_source_address <= `BSV_ASSIGNMENT_DELAY
	  core_saved_source_address$D_IN;
    if (fromCore_dstaddr$EN)
      fromCore_dstaddr <= `BSV_ASSIGNMENT_DELAY fromCore_dstaddr$D_IN;
    if (fromCore_outvc$EN)
      fromCore_outvc <= `BSV_ASSIGNMENT_DELAY fromCore_outvc$D_IN;
    if (toCore_staging_0$EN)
      toCore_staging_0 <= `BSV_ASSIGNMENT_DELAY toCore_staging_0$D_IN;
    if (toCore_staging_1$EN)
      toCore_staging_1 <= `BSV_ASSIGNMENT_DELAY toCore_staging_1$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    core_dtlogger_cticks = 32'hAAAAAAAA;
    core_dtlogger_dlog = 32'hAAAAAAAA;
    core_dtlogger_initialized = 1'h0;
    core_dtlogger_tlog = 32'hAAAAAAAA;
    core_mergeF_m_notDeqPort = 1'h0;
    core_running = 1'h0;
    core_saved_source_address = 4'hA;
    core_start_reg = 1'h0;
    core_start_reg_1 = 1'h0;
    core_state_can_overlap = 1'h0;
    core_state_fired = 1'h0;
    core_state_mkFSMstate = 4'hA;
    core_task_info = 8'hAA;
    core_x = 25'h0AAAAAA;
    fromCore_dstaddr = 4'hA;
    fromCore_dtlogger_cticks = 32'hAAAAAAAA;
    fromCore_dtlogger_dlog = 32'hAAAAAAAA;
    fromCore_dtlogger_initialized = 1'h0;
    fromCore_dtlogger_tlog = 32'hAAAAAAAA;
    fromCore_f_idx = 16'hAAAA;
    fromCore_flits2send = 16'hAAAA;
    fromCore_outvc = 1'h0;
    fromCore_vflits_0 = 25'h0AAAAAA;
    fromCore_vflits_1 = 25'h0AAAAAA;
    fromCore_vflits_10 = 25'h0AAAAAA;
    fromCore_vflits_11 = 25'h0AAAAAA;
    fromCore_vflits_12 = 25'h0AAAAAA;
    fromCore_vflits_13 = 25'h0AAAAAA;
    fromCore_vflits_14 = 25'h0AAAAAA;
    fromCore_vflits_15 = 25'h0AAAAAA;
    fromCore_vflits_16 = 25'h0AAAAAA;
    fromCore_vflits_17 = 25'h0AAAAAA;
    fromCore_vflits_18 = 25'h0AAAAAA;
    fromCore_vflits_19 = 25'h0AAAAAA;
    fromCore_vflits_2 = 25'h0AAAAAA;
    fromCore_vflits_3 = 25'h0AAAAAA;
    fromCore_vflits_4 = 25'h0AAAAAA;
    fromCore_vflits_5 = 25'h0AAAAAA;
    fromCore_vflits_6 = 25'h0AAAAAA;
    fromCore_vflits_7 = 25'h0AAAAAA;
    fromCore_vflits_8 = 25'h0AAAAAA;
    fromCore_vflits_9 = 25'h0AAAAAA;
    splf_c2nw_m_notDeqPort = 5'h0A;
    toCore_dtlogger_cticks = 32'hAAAAAAAA;
    toCore_dtlogger_dlog = 32'hAAAAAAAA;
    toCore_dtlogger_initialized = 1'h0;
    toCore_dtlogger_tlog = 32'hAAAAAAAA;
    toCore_fc_0 = 8'hAA;
    toCore_fc_1 = 8'hAA;
    toCore_staging_0 = 33'h0AAAAAAAA;
    toCore_staging_1 = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3)
	$fwrite(core_dtlogger_dlog,
		"%d\t: tid=%s ",
		$unsigned(core_dtlogger_cticks),
		"1",
		"STATE (enter)\trecv_11_l24c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3)
	$fwrite(core_dtlogger_dlog, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3)
	$write("%d\t: tid=%s ",
	       $unsigned(core_dtlogger_cticks),
	       "1",
	       "STATE (enter)\trecv_11_l24c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3)
	$fflush(core_dtlogger_dlog);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_4 &&
	  pkt_nw2c_0$D_OUT[32:29] != 4'd0)
	$display("address(mismatch? %d (exp:%d, got:%d))/type(mismatch? %d)%s recv_11_l24c8",
		 1'd1,
		 $signed(32'd0),
		 pkt_nw2c_0$D_OUT[32:29],
		 1'd0,
		 "echo1");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5)
	$fwrite(core_dtlogger_dlog,
		"%d\t: tid=%s ",
		$unsigned(core_dtlogger_cticks),
		"1",
		"STATE (exit)\trecv_11_l24c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5)
	$fwrite(core_dtlogger_dlog, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5)
	$write("%d\t: tid=%s ",
	       $unsigned(core_dtlogger_cticks),
	       "1",
	       "STATE (exit)\trecv_11_l24c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5)
	$fflush(core_dtlogger_dlog);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fwrite(core_dtlogger_dlog,
		"%d\t: tid=%s ",
		$unsigned(core_dtlogger_cticks),
		"1");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fwrite(core_dtlogger_dlog, " displaystmt_12_l25c11 instance=x\t");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fwrite(core_dtlogger_dlog, "X { ", "v: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fwrite(core_dtlogger_dlog, "'h%h", core_x, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fwrite(core_dtlogger_dlog, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$write("%d\t: tid=%s ", $unsigned(core_dtlogger_cticks), "1");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$write(" displaystmt_12_l25c11 instance=x\t");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6) $write("X { ", "v: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$write("'h%h", core_x, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6)
	$fflush(core_dtlogger_dlog);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7)
	$fwrite(core_dtlogger_dlog,
		"%d\t: tid=%s ",
		$unsigned(core_dtlogger_cticks),
		"1",
		"STATE (enter)\tsend_13_l26c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7)
	$fwrite(core_dtlogger_dlog, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7)
	$write("%d\t: tid=%s ",
	       $unsigned(core_dtlogger_cticks),
	       "1",
	       "STATE (enter)\tsend_13_l26c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7)
	$fflush(core_dtlogger_dlog);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_9)
	$fwrite(core_dtlogger_dlog,
		"%d\t: tid=%s ",
		$unsigned(core_dtlogger_cticks),
		"1",
		"STATE (exit)\tsend_13_l26c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_9)
	$fwrite(core_dtlogger_dlog, "\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_9)
	$write("%d\t: tid=%s ",
	       $unsigned(core_dtlogger_cticks),
	       "1",
	       "STATE (exit)\tsend_13_l26c8 ");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_9) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_9)
	$fflush(core_dtlogger_dlog);
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_3 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_4 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_5 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 872, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l872c15] and\n  [RL_core_action_l874c3, RL_core_action_l886c15, RL_core_action_l893c3,\n  RL_core_action_l903c15, RL_core_action_l905c5, RL_core_action_l910c15] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_4 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_5 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 874, column 3: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l874c3] and\n  [RL_core_action_l886c15, RL_core_action_l893c3, RL_core_action_l903c15,\n  RL_core_action_l905c5, RL_core_action_l910c15] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_5 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 886, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l886c15] and\n  [RL_core_action_l893c3, RL_core_action_l903c15, RL_core_action_l905c5,\n  RL_core_action_l910c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_6 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 893, column 3: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l893c3] and\n  [RL_core_action_l903c15, RL_core_action_l905c5, RL_core_action_l910c15] )\n  fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_7 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 903, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l903c15] and\n  [RL_core_action_l905c5, RL_core_action_l910c15] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_8 &&
	  MUX_core_state_mkFSMstate$write_1__SEL_9)
	$display("Error: \"../src/Tasks.bsv\", line 905, column 5: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l905c5] and\n  [RL_core_action_l910c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (MUX_core_state_mkFSMstate$write_1__SEL_2 &&
	  (MUX_core_state_mkFSMstate$write_1__SEL_3 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_4 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_5 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_6 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_7 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_8 ||
	   MUX_core_state_mkFSMstate$write_1__SEL_9))
	$display("Error: \"../src/Tasks.bsv\", line 916, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_core_action_l916c9] and\n  [RL_core_action_l872c15, RL_core_action_l874c3, RL_core_action_l886c15,\n  RL_core_action_l893c3, RL_core_action_l903c15, RL_core_action_l905c5,\n  RL_core_action_l910c15] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (core_running &&
	  core_abort_whas__84_AND_core_abort_wget__85_86_ETC___d252 &&
	  !core_start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (!core_dtlogger_initialized)
	begin
	  TASK_fopen___d171 = $fopen("log_echo1_node.1.debug.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!core_dtlogger_initialized)
	begin
	  TASK_fopen___d172 = $fopen("log_echo1_node.1.trace.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!core_dtlogger_initialized &&
	  (TASK_fopen___d171 == 32'd0 || TASK_fopen___d172 == 32'd0))
	$display("Cannot open debug or trace files at ",
		 "log_echo1",
		 "\nQuitting.");
    if (RST_N != `BSV_RESET_VALUE)
      if (!core_dtlogger_initialized &&
	  (TASK_fopen___d171 == 32'd0 || TASK_fopen___d172 == 32'd0))
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (!core_dtlogger_initialized && TASK_fopen___d171 != 32'd0 &&
	  TASK_fopen___d172 != 32'd0)
	$display("Debug and Trace files created");
    if (RST_N != `BSV_RESET_VALUE)
      if (!fromCore_dtlogger_initialized)
	begin
	  TASK_fopen___d263 =
	      $fopen("log_ToNetworkTask_echo1_node.1.debug.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!fromCore_dtlogger_initialized)
	begin
	  TASK_fopen___d264 =
	      $fopen("log_ToNetworkTask_echo1_node.1.trace.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!fromCore_dtlogger_initialized &&
	  (TASK_fopen___d263 == 32'd0 || TASK_fopen___d264 == 32'd0))
	$display("Cannot open debug or trace files at ",
		 "log_ToNetworkTask_echo1",
		 "\nQuitting.");
    if (RST_N != `BSV_RESET_VALUE)
      if (!fromCore_dtlogger_initialized &&
	  (TASK_fopen___d263 == 32'd0 || TASK_fopen___d264 == 32'd0))
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (!fromCore_dtlogger_initialized && TASK_fopen___d263 != 32'd0 &&
	  TASK_fopen___d264 != 32'd0)
	$display("Debug and Trace files created");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("\tBADFLIT this is Task_echo1 @ %d but I received ", 4'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_0$D_OUT[31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_0$D_OUT[30]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_0$D_OUT[29:26]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_0$D_OUT[25]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_0$D_OUT[24:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack && toCore_inFifo_0$D_OUT[29:26] != 4'd1)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("\tBADFLIT this is Task_echo1 @ %d but I received ", 4'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_1$D_OUT[31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_1$D_OUT[30]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_1$D_OUT[29:26]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_1$D_OUT[25]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("'h%h", toCore_inFifo_1$D_OUT[24:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_toCore_pack_1 && toCore_inFifo_1$D_OUT[29:26] != 4'd1)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (!toCore_dtlogger_initialized)
	begin
	  TASK_fopen___d342 =
	      $fopen("log_FromNetworkTask_echo1_node.1.debug.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!toCore_dtlogger_initialized)
	begin
	  TASK_fopen___d343 =
	      $fopen("log_FromNetworkTask_echo1_node.1.trace.log", "w");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (!toCore_dtlogger_initialized &&
	  (TASK_fopen___d342 == 32'd0 || TASK_fopen___d343 == 32'd0))
	$display("Cannot open debug or trace files at ",
		 "log_FromNetworkTask_echo1",
		 "\nQuitting.");
    if (RST_N != `BSV_RESET_VALUE)
      if (!toCore_dtlogger_initialized &&
	  (TASK_fopen___d342 == 32'd0 || TASK_fopen___d343 == 32'd0))
	$finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (!toCore_dtlogger_initialized && TASK_fopen___d342 != 32'd0 &&
	  TASK_fopen___d343 != 32'd0)
	$display("Debug and Trace files created");
  end
  // synopsys translate_on
endmodule  // mkNodeTask_echo1

