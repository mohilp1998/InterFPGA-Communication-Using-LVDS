//
// Generated by Bluespec Compiler, version 2017.04.beta1 (build 35065, 2017-04-17)
//
// On Thu Nov 23 18:32:35 IST 2017
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register counter
  reg [31 : 0] counter;
  wire [31 : 0] counter$D_IN;
  wire counter$EN;

  // register state
  reg [31 : 0] state;
  reg [31 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule top
  reg [31 : 0] top$putFlit_put;
  wire [31 : 0] top$getFlit_get;
  wire top$EN_getFlit_get,
       top$EN_putFlit_put,
       top$RDY_getFlit_get,
       top$RDY_putFlit_put;

  // rule scheduling signals
  wire WILL_FIRE_RL_send0,
       WILL_FIRE_RL_send1,
       WILL_FIRE_RL_send10,
       WILL_FIRE_RL_send11;

  // submodule top
  mkMFpgaTop top(.CLK(CLK),
		 .RST_N(RST_N),
		 .putFlit0_put(top$putFlit_put),
		 .EN_putFlit0_put(top$EN_putFlit_put),
		 .EN_getFlit0_get(top$EN_getFlit_get),
		 .RDY_putFlit0_put(top$RDY_putFlit_put),
		 .getFlit0_get(top$getFlit_get),
		 .RDY_getFlit0_get(top$RDY_getFlit_get));

  // rule RL_send0
  assign WILL_FIRE_RL_send0 =
	     top$RDY_putFlit_put && state == 32'd0 &&
	     (counter ^ 32'h80000000) >= 32'h800000C8 ;

  // rule RL_send1
  assign WILL_FIRE_RL_send1 = top$RDY_putFlit_put && state == 32'd1 ;

  // rule RL_send10
  assign WILL_FIRE_RL_send10 = top$RDY_putFlit_put && state == 32'd2 ;

  // rule RL_send11
  assign WILL_FIRE_RL_send11 = top$RDY_putFlit_put && state == 32'd3 ;

  // register counter
  assign counter$D_IN = counter + 32'd1 ;
  assign counter$EN = 1'd1 ;

  // register state
  always@(WILL_FIRE_RL_send0 or
	  WILL_FIRE_RL_send1 or WILL_FIRE_RL_send10 or WILL_FIRE_RL_send11)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_send0: state$D_IN = 32'd1;
      WILL_FIRE_RL_send1: state$D_IN = 32'd2;
      WILL_FIRE_RL_send10: state$D_IN = 32'd3;
      WILL_FIRE_RL_send11: state$D_IN = 32'd4;
      default: state$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign state$EN =
	     WILL_FIRE_RL_send0 || WILL_FIRE_RL_send1 ||
	     WILL_FIRE_RL_send10 ||
	     WILL_FIRE_RL_send11 ;

  // submodule top
  always@(WILL_FIRE_RL_send0 or
	  WILL_FIRE_RL_send10 or WILL_FIRE_RL_send1 or WILL_FIRE_RL_send11)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_send0: top$putFlit_put = 32'h84000000;
      WILL_FIRE_RL_send10: top$putFlit_put = 32'h98000000;
      WILL_FIRE_RL_send1: top$putFlit_put = 32'hC400DEA1;
      WILL_FIRE_RL_send11: top$putFlit_put = 32'hD800DEA2;
      default: top$putFlit_put = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign top$EN_putFlit_put =
	     WILL_FIRE_RL_send0 || WILL_FIRE_RL_send10 ||
	     WILL_FIRE_RL_send1 ||
	     WILL_FIRE_RL_send11 ;
  assign top$EN_getFlit_get = top$RDY_getFlit_get ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        counter <= `BSV_ASSIGNMENT_DELAY 32'd0;
	state <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (counter$EN) counter <= `BSV_ASSIGNMENT_DELAY counter$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    counter = 32'hAAAAAAAA;
    state = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0)
	$write("[%d] sending FLIT 0 to echo1 ", $signed(counter));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("'h%h", 4'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send0) $write("'h%h", 25'd0, " }");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_send0) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1)
	$write("[%d] sending FLIT 1 to echo1 ", $signed(counter));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("'h%h", 4'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send1) $write("'h%h", 25'h000DEA1, " }");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_send1) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10)
	$write("[%d] sending FLIT 0 to echo2 ", $signed(counter));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("'h%h", 4'd6);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send10) $write("'h%h", 25'd0, " }");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_send10) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11)
	$write("[%d] sending FLIT 1 to echo2 ", $signed(counter));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("'h%h", 1'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("'h%h", 4'd6);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_send11) $write("'h%h", 25'h000DEA2, " }");
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_send11) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("[%d] got FLIT ", $signed(counter));
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("Flit { ", "valid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("'h%h", top$getFlit_get[31]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write(", ", "is_tail: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("'h%h", top$getFlit_get[30]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write(", ", "destAddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("'h%h", top$getFlit_get[29:26]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write(", ", "vc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("'h%h", top$getFlit_get[25]);
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (top$RDY_getFlit_get) $write("'h%h", top$getFlit_get[24:0], " }");
    if (RST_N != `BSV_RESET_VALUE) if (top$RDY_getFlit_get) $write("\n");
  end
  // synopsys translate_on
endmodule  // mkTb

